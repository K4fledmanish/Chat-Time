{"version":3,"sources":["../src/log.ts"],"names":["EXPO_DEBUG","_bundleProgressBar","_oraSpinner","_printNewLineBeforeNextLog","_isLastLineNewLine","_updateIsLastLineNewLine","args","length","lastArg","match","_maybePrintNewLine","console","log","consoleDebug","debug","consoleInfo","info","consoleLog","consoleWarn","warn","consoleError","error","respectProgressBars","commitLogs","terminate","lastDraw","stop","render","start","getPrefix","chalkColor","Date","toTimeString","slice","withPrefixAndTextColor","chalk","gray","program","nonInteractive","map","arg","withPrefix","nested","message","newLine","addNewLineIfNone","printNewLineBeforeNextLog","setBundleProgressBar","bar","setSpinner","oraSpinner","originalStart","bind","text","originalStop","red","nestedError","yellow","isDebug","nestedWarn","clear","process","stdout","write","platform","terminalLink"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport program from 'commander';\nimport { boolish } from 'getenv';\nimport { Ora } from 'ora';\nimport terminalLink from 'terminal-link';\n\nconst EXPO_DEBUG = boolish('EXPO_DEBUG', false);\n\ntype Color = (...text: string[]) => string;\n\nlet _bundleProgressBar: any;\nlet _oraSpinner: any;\n\nlet _printNewLineBeforeNextLog = false;\nlet _isLastLineNewLine = false;\nfunction _updateIsLastLineNewLine(args: any[]) {\n  if (args.length === 0) {\n    _isLastLineNewLine = true;\n  } else {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && (lastArg === '' || lastArg.match(/[\\r\\n]$/))) {\n      _isLastLineNewLine = true;\n    } else {\n      _isLastLineNewLine = false;\n    }\n  }\n}\n\nfunction _maybePrintNewLine() {\n  if (_printNewLineBeforeNextLog) {\n    _printNewLineBeforeNextLog = false;\n    console.log(); // eslint-disable-line no-console\n  }\n}\n\nfunction consoleDebug(...args: any[]) {\n  _maybePrintNewLine();\n  _updateIsLastLineNewLine(args);\n\n  console.debug(...args); // eslint-disable-line no-console\n}\n\nfunction consoleInfo(...args: any[]) {\n  _maybePrintNewLine();\n  _updateIsLastLineNewLine(args);\n\n  console.info(...args); // eslint-disable-line no-console\n}\n\nfunction consoleLog(...args: any[]) {\n  _maybePrintNewLine();\n  _updateIsLastLineNewLine(args);\n\n  console.log(...args); // eslint-disable-line no-console\n}\n\nfunction consoleWarn(...args: any[]) {\n  _maybePrintNewLine();\n  _updateIsLastLineNewLine(args);\n\n  console.warn(...args); // eslint-disable-line no-console\n}\n\nfunction consoleError(...args: any[]) {\n  _maybePrintNewLine();\n  _updateIsLastLineNewLine(args);\n\n  console.error(...args); // eslint-disable-line no-console\n}\n\nfunction respectProgressBars(commitLogs: () => void) {\n  if (_bundleProgressBar) {\n    _bundleProgressBar.terminate();\n    _bundleProgressBar.lastDraw = '';\n  }\n  if (_oraSpinner) {\n    _oraSpinner.stop();\n  }\n  commitLogs();\n\n  if (_bundleProgressBar) {\n    _bundleProgressBar.render();\n  }\n  if (_oraSpinner) {\n    _oraSpinner.start();\n  }\n}\n\nfunction getPrefix(chalkColor: Color) {\n  return chalkColor(`[${new Date().toTimeString().slice(0, 8)}]`);\n}\n\nfunction withPrefixAndTextColor(args: any[], chalkColor: Color = chalk.gray) {\n  if (program.nonInteractive) {\n    return [getPrefix(chalkColor), ...args.map(arg => chalkColor(arg))];\n  } else {\n    return args.map(arg => chalkColor(arg));\n  }\n}\n\nfunction withPrefix(args: any[], chalkColor = chalk.gray) {\n  if (program.nonInteractive) {\n    return [getPrefix(chalkColor), ...args];\n  } else {\n    return args;\n  }\n}\n\nfunction log(...args: any[]) {\n  respectProgressBars(() => {\n    consoleLog(...withPrefix(args));\n  });\n}\n\nlog.nested = function (message: any) {\n  respectProgressBars(() => {\n    consoleLog(message);\n  });\n};\n\nlog.newLine = function newLine() {\n  respectProgressBars(() => {\n    consoleLog();\n  });\n};\n\nlog.addNewLineIfNone = function addNewLineIfNone() {\n  if (!_isLastLineNewLine && !_printNewLineBeforeNextLog) {\n    log.newLine();\n  }\n};\n\nlog.printNewLineBeforeNextLog = function printNewLineBeforeNextLog() {\n  _printNewLineBeforeNextLog = true;\n};\n\nlog.setBundleProgressBar = function setBundleProgressBar(bar: any) {\n  _bundleProgressBar = bar;\n};\n\nlog.setSpinner = function setSpinner(oraSpinner: Ora | null) {\n  _oraSpinner = oraSpinner;\n  if (_oraSpinner) {\n    const originalStart = _oraSpinner.start.bind(_oraSpinner);\n    _oraSpinner.start = (text: any) => {\n      // Reset the new line tracker\n      _isLastLineNewLine = false;\n      return originalStart(text);\n    };\n    // All other methods of stopping will invoke the stop method.\n    const originalStop = _oraSpinner.stop.bind(_oraSpinner);\n    _oraSpinner.stop = () => {\n      // Reset the target spinner\n      log.setSpinner(null);\n      return originalStop();\n    };\n  }\n};\n\nlog.error = function error(...args: any[]) {\n  respectProgressBars(() => {\n    consoleError(...withPrefixAndTextColor(args, chalk.red));\n  });\n};\n\nlog.nestedError = function (message: string) {\n  respectProgressBars(() => {\n    consoleError(chalk.red(message));\n  });\n};\n\nlog.warn = function warn(...args: any[]) {\n  respectProgressBars(() => {\n    consoleWarn(...withPrefixAndTextColor(args, chalk.yellow));\n  });\n};\n\nlog.isDebug = EXPO_DEBUG;\n\n// Only show these logs when EXPO_DEBUG is active\nlog.debug = function debug(...args: any[]) {\n  if (!EXPO_DEBUG) {\n    return;\n  }\n  respectProgressBars(() => {\n    consoleDebug(...withPrefixAndTextColor(args));\n  });\n};\n\nlog.info = function info(...args: any[]) {\n  if (!EXPO_DEBUG) {\n    return;\n  }\n  respectProgressBars(() => {\n    consoleInfo(...args);\n  });\n};\n\nlog.nestedWarn = function (message: string) {\n  respectProgressBars(() => {\n    consoleWarn(chalk.yellow(message));\n  });\n};\n\nlog.gray = function (...args: any[]) {\n  respectProgressBars(() => {\n    consoleLog(...withPrefixAndTextColor(args));\n  });\n};\n\nlog.clear = function () {\n  process.stdout.write(process.platform === 'win32' ? '\\x1B[2J\\x1B[0f' : '\\x1B[2J\\x1B[3J\\x1B[H');\n};\n\nlog.chalk = chalk;\nlog.terminalLink = terminalLink;\n\nexport default log;\n"],"file":"log.js"}