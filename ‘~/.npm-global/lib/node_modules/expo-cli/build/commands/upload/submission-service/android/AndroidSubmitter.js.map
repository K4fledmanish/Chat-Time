{"version":3,"sources":["../../../../../src/commands/upload/submission-service/android/AndroidSubmitter.ts"],"names":["AndroidSubmitter","constructor","ctx","options","submitAsync","resolvedSourceOptions","resolveSourceOptions","user","UserManager","ensureLoggedInAsync","exp","projectDir","projectId","accountName","projectName","slug","submissionConfig","AndroidOnlineSubmitter","formatSubmissionConfigAndPrintSummary","onlineSubmitter","commandOptions","verbose","androidPackage","androidPackageSource","archive","archiveSource","serviceAccountPath","serviceAccountSource","serviceAccount","fs","readFile","archiveUrl","location","archiveType","type","printSummary","scheduleSpinner","start","submissionId","SubmissionService","startSubmissionAsync","Platform","ANDROID","succeed","err","fail","submissionCompleted","submissionStatus","submission","submissionSpinner","DEFAULT_CHECK_INTERVAL_MS","getSubmissionAsync","text","getStatusText","status","SubmissionStatus","ERRORED","process","exitCode","FINISHED","IN_QUEUE","IN_PROGRESS","Error","SummaryHumanReadableKeys","archivePath","track","releaseStatus","SummaryHumanReadableValues","path","breakWord","url","word","chars","map","arr","join","summary","table","Table","colWidths","wordWrap","push","colSpan","content","log","chalk","bold","hAlign","key","value","Object","entries","displayKey","displayValue","toString"],"mappings":"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","sourcesContent":["import { UserManager } from '@expo/xdl';\nimport Table from 'cli-table3';\nimport fs from 'fs-extra';\nimport chunk from 'lodash/chunk';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport ora from 'ora';\n\nimport log from '../../../../log';\nimport { ensureProjectExistsAsync, getProjectOwner } from '../../../../projects';\nimport { sleep } from '../../../utils/promise';\nimport SubmissionService, { DEFAULT_CHECK_INTERVAL_MS } from '../SubmissionService';\nimport { Platform, Submission, SubmissionStatus } from '../SubmissionService.types';\nimport { Archive, ArchiveSource, getArchiveAsync } from '../archive-source';\nimport { getExpoConfig } from '../utils/config';\nimport { displayLogs } from '../utils/logs';\nimport { AndroidPackageSource, getAndroidPackageAsync } from './AndroidPackageSource';\nimport {\n  AndroidSubmissionConfig,\n  ArchiveType,\n  ReleaseStatus,\n  ReleaseTrack,\n} from './AndroidSubmissionConfig';\nimport { getServiceAccountAsync, ServiceAccountSource } from './ServiceAccountSource';\nimport { AndroidSubmissionContext } from './types';\n\nexport interface AndroidSubmissionOptions\n  extends Pick<AndroidSubmissionConfig, 'track' | 'releaseStatus'> {\n  androidPackageSource: AndroidPackageSource;\n  archiveSource: ArchiveSource;\n  serviceAccountSource: ServiceAccountSource;\n}\n\ninterface ResolvedSourceOptions {\n  androidPackage: string;\n  archive: Archive;\n  serviceAccountPath: string;\n}\n\nclass AndroidSubmitter {\n  constructor(private ctx: AndroidSubmissionContext, private options: AndroidSubmissionOptions) {}\n\n  async submitAsync(): Promise<void> {\n    const resolvedSourceOptions = await this.resolveSourceOptions();\n    const user = await UserManager.ensureLoggedInAsync();\n    const exp = getExpoConfig(this.ctx.projectDir);\n    const projectId = await ensureProjectExistsAsync(user, {\n      accountName: getProjectOwner(user, exp),\n      projectName: exp.slug,\n    });\n    const submissionConfig = await AndroidOnlineSubmitter.formatSubmissionConfigAndPrintSummary(\n      { ...this.options, projectId },\n      resolvedSourceOptions\n    );\n    const onlineSubmitter = new AndroidOnlineSubmitter(\n      submissionConfig,\n      this.ctx.commandOptions.verbose ?? false\n    );\n    await onlineSubmitter.submitAsync();\n  }\n\n  private async resolveSourceOptions(): Promise<ResolvedSourceOptions> {\n    const androidPackage = await getAndroidPackageAsync(this.options.androidPackageSource);\n    const archive = await getArchiveAsync(this.options.archiveSource);\n    const serviceAccountPath = await getServiceAccountAsync(this.options.serviceAccountSource);\n    return {\n      androidPackage,\n      archive,\n      serviceAccountPath,\n    };\n  }\n}\n\nexport type AndroidOnlineSubmissionConfig = AndroidSubmissionConfig & { projectId: string };\ninterface AndroidOnlineSubmissionOptions extends AndroidSubmissionOptions {\n  projectId: string;\n}\n\nclass AndroidOnlineSubmitter {\n  static async formatSubmissionConfigAndPrintSummary(\n    options: AndroidOnlineSubmissionOptions,\n    { archive, androidPackage, serviceAccountPath }: ResolvedSourceOptions\n  ): Promise<AndroidOnlineSubmissionConfig> {\n    const serviceAccount = await fs.readFile(serviceAccountPath, 'utf-8');\n    const submissionConfig = {\n      androidPackage,\n      archiveUrl: archive.location,\n      archiveType: archive.type,\n      serviceAccount,\n      ...pick(options, 'track', 'releaseStatus', 'projectId'),\n    };\n    printSummary({\n      ...omit(submissionConfig, 'serviceAccount'),\n      serviceAccountPath,\n    });\n    return submissionConfig;\n  }\n\n  constructor(\n    private submissionConfig: AndroidOnlineSubmissionConfig,\n    private verbose: boolean = false\n  ) {}\n\n  async submitAsync(): Promise<void> {\n    const scheduleSpinner = ora('Scheduling submission').start();\n    let submissionId: string;\n    try {\n      submissionId = await SubmissionService.startSubmissionAsync(\n        Platform.ANDROID,\n        this.submissionConfig.projectId,\n        this.submissionConfig\n      );\n      scheduleSpinner.succeed();\n    } catch (err) {\n      scheduleSpinner.fail('Failed to schedule submission');\n      throw err;\n    }\n\n    let submissionCompleted = false;\n    let submissionStatus: SubmissionStatus | null = null;\n    let submission: Submission | null = null;\n    const submissionSpinner = ora('Submitting your app to Google Play Store').start();\n    try {\n      while (!submissionCompleted) {\n        await sleep(DEFAULT_CHECK_INTERVAL_MS);\n        submission = await SubmissionService.getSubmissionAsync(\n          this.submissionConfig.projectId,\n          submissionId\n        );\n        submissionSpinner.text = AndroidOnlineSubmitter.getStatusText(submission.status);\n        submissionStatus = submission.status;\n        if (submissionStatus === SubmissionStatus.ERRORED) {\n          submissionCompleted = true;\n          process.exitCode = 1;\n          submissionSpinner.fail();\n        } else if (submissionStatus === SubmissionStatus.FINISHED) {\n          submissionCompleted = true;\n          submissionSpinner.succeed();\n        }\n      }\n    } catch (err) {\n      submissionSpinner.fail(AndroidOnlineSubmitter.getStatusText(SubmissionStatus.ERRORED));\n      throw err;\n    }\n\n    await displayLogs(submission, submissionStatus, this.verbose);\n  }\n\n  private static getStatusText(status: SubmissionStatus): string {\n    if (status === SubmissionStatus.IN_QUEUE) {\n      return 'Submitting your app to Google Play Store: waiting for an available submitter';\n    } else if (status === SubmissionStatus.IN_PROGRESS) {\n      return 'Submitting your app to Google Play Store: submission in progress';\n    } else if (status === SubmissionStatus.FINISHED) {\n      return 'Successfully submitted your app to Google Play Store!';\n    } else if (status === SubmissionStatus.ERRORED) {\n      return 'Something went wrong when submitting your app to Google Play Store.';\n    } else {\n      throw new Error('This should never happen');\n    }\n  }\n}\n\ninterface Summary {\n  androidPackage: string;\n  archivePath?: string;\n  archiveUrl?: string;\n  archiveType: ArchiveType;\n  serviceAccountPath: string;\n  track: ReleaseTrack;\n  releaseStatus?: ReleaseStatus;\n  projectId?: string;\n}\n\nconst SummaryHumanReadableKeys: Record<keyof Summary, string> = {\n  androidPackage: 'Android package',\n  archivePath: 'Archive path',\n  archiveUrl: 'Archive URL',\n  archiveType: 'Archive type',\n  serviceAccountPath: 'Google Service Account',\n  track: 'Release track',\n  releaseStatus: 'Release status',\n  projectId: 'Project ID',\n};\n\nconst SummaryHumanReadableValues: Partial<Record<keyof Summary, Function>> = {\n  archivePath: (path: string) => breakWord(path, 50),\n  archiveUrl: (url: string) => breakWord(url, 50),\n};\n\nfunction breakWord(word: string, chars: number): string {\n  return chunk(word, chars)\n    .map(arr => arr.join(''))\n    .join('\\n');\n}\n\nfunction printSummary(summary: Summary): void {\n  const table = new Table({\n    colWidths: [25, 55],\n    wordWrap: true,\n  });\n  table.push([\n    {\n      colSpan: 2,\n      content: log.chalk.bold('Android Submission Summary'),\n      hAlign: 'center',\n    },\n  ]);\n  for (const [key, value] of Object.entries(summary)) {\n    const displayKey = SummaryHumanReadableKeys[key as keyof Summary];\n    const displayValue = SummaryHumanReadableValues[key as keyof Summary]?.(value) ?? value;\n    table.push([displayKey, displayValue]);\n  }\n  log(table.toString());\n}\n\nexport default AndroidSubmitter;\n"],"file":"AndroidSubmitter.js"}