{"version":3,"sources":["../../../../../src/commands/eas-build/utils/expoUpdates/android.ts"],"names":["configureUpdatesAsync","projectDir","exp","username","buildGradlePath","AndroidConfig","Paths","getAppBuildGradle","buildGradleContent","fs","readFile","Updates","isBuildGradleConfigured","gradleScriptApply","formatApplyLineForBuildGradle","writeFile","androidManifestPath","getAndroidManifestAsync","Error","androidManifest","Manifest","readAndroidManifestAsync","isMainApplicationMetaDataSynced","result","setUpdatesConfig","writeAndroidManifestAsync","syncUpdatesConfigurationAsync","ensureUpdatesConfiguredAsync","error","log","areVersionsSynced","setVersionsConfig","warn","isMainApplicationMetaDataSet"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,eAAeA,qBAAf,CAAqCC,UAArC,EAAyDC,GAAzD,EAAyF;AAC9F,qCAAoBA,GAApB;AACA,QAAMC,QAAQ,GAAG,MAAM,8BAAeD,GAAf,CAAvB;;AACA,QAAME,eAAe,GAAGC,+BAAcC,KAAd,CAAoBC,iBAApB,CAAsCN,UAAtC,CAAxB;;AACA,QAAMO,kBAAkB,GAAG,MAAMC,mBAAGC,QAAH,CAAYN,eAAZ,EAA6B,MAA7B,CAAjC;;AAEA,MAAI,CAACC,+BAAcM,OAAd,CAAsBC,uBAAtB,CAA8CJ,kBAA9C,EAAkEP,UAAlE,EAA8EC,GAA9E,CAAL,EAAyF;AACvF,UAAMW,iBAAiB,GAAGR,+BAAcM,OAAd,CAAsBG,6BAAtB,CAAoDb,UAApD,EAAgEC,GAAhE,CAA1B;;AAEA,UAAMO,mBAAGM,SAAH,CACJX,eADI,EAEH,GAAEI,kBAAmB,uCAAsCK,iBAAkB,IAF1E,CAAN;AAID;;AAED,QAAMG,mBAAmB,GAAG,MAAMX,+BAAcC,KAAd,CAAoBW,uBAApB,CAA4ChB,UAA5C,CAAlC;;AACA,MAAI,CAACe,mBAAL,EAA0B;AACxB,UAAM,IAAIE,KAAJ,CAAW,6DAA4DjB,UAAW,GAAlF,CAAN;AACD;;AACD,QAAMkB,eAAe,GAAG,MAAMd,+BAAce,QAAd,CAAuBC,wBAAvB,CAC5BL,mBAD4B,CAA9B;;AAIA,MAAI,CAACX,+BAAcM,OAAd,CAAsBW,+BAAtB,CAAsDpB,GAAtD,EAA2DiB,eAA3D,EAA4EhB,QAA5E,CAAL,EAA4F;AAC1F,UAAMoB,MAAM,GAAG,MAAMlB,+BAAcM,OAAd,CAAsBa,gBAAtB,CAAuCtB,GAAvC,EAA4CiB,eAA5C,EAA6DhB,QAA7D,CAArB;AAEA,UAAME,+BAAce,QAAd,CAAuBK,yBAAvB,CAAiDT,mBAAjD,EAAsEO,MAAtE,CAAN;AACD;AACF;;AAEM,eAAeG,6BAAf,CACLzB,UADK,EAELC,GAFK,EAGU;AACf,qCAAoBA,GAApB;AACA,QAAMC,QAAQ,GAAG,MAAM,8BAAeD,GAAf,CAAvB;;AACA,MAAI;AACF,UAAMyB,4BAA4B,CAAC1B,UAAD,EAAaC,GAAb,CAAlC;AACD,GAFD,CAEE,OAAO0B,KAAP,EAAc;AACdC,mBAAID,KAAJ,CACE,wGADF;;AAGA,UAAMA,KAAN;AACD;;AAED,QAAMZ,mBAAmB,GAAG,MAAMX,+BAAcC,KAAd,CAAoBW,uBAApB,CAA4ChB,UAA5C,CAAlC;;AACA,MAAI,CAACe,mBAAL,EAA0B;AACxB,UAAM,IAAIE,KAAJ,CAAW,6DAA4DjB,UAAW,GAAlF,CAAN;AACD;;AACD,MAAIkB,eAAe,GAAG,MAAMd,+BAAce,QAAd,CAAuBC,wBAAvB,CAAgDL,mBAAhD,CAA5B;;AAEA,MAAI,CAACX,+BAAcM,OAAd,CAAsBmB,iBAAtB,CAAwC5B,GAAxC,EAA6CiB,eAA7C,CAAL,EAAoE;AAClEA,IAAAA,eAAe,GAAGd,+BAAcM,OAAd,CAAsBoB,iBAAtB,CAAwC7B,GAAxC,EAA6CiB,eAA7C,CAAlB;AACA,UAAMd,+BAAce,QAAd,CAAuBK,yBAAvB,CAAiDT,mBAAjD,EAAsEG,eAAtE,CAAN;AACD;;AAED,MAAI,CAACd,+BAAcM,OAAd,CAAsBW,+BAAtB,CAAsDpB,GAAtD,EAA2DiB,eAA3D,EAA4EhB,QAA5E,CAAL,EAA4F;AAC1F0B,mBAAIG,IAAJ,CACE,gKADF;AAGD;AACF;;AAED,eAAeL,4BAAf,CAA4C1B,UAA5C,EAAgEC,GAAhE,EAAgG;AAC9F,QAAME,eAAe,GAAGC,+BAAcC,KAAd,CAAoBC,iBAApB,CAAsCN,UAAtC,CAAxB;;AACA,QAAMO,kBAAkB,GAAG,MAAMC,mBAAGC,QAAH,CAAYN,eAAZ,EAA6B,MAA7B,CAAjC;;AAEA,MAAI,CAACC,+BAAcM,OAAd,CAAsBC,uBAAtB,CAA8CJ,kBAA9C,EAAkEP,UAAlE,EAA8EC,GAA9E,CAAL,EAAyF;AACvF,UAAMW,iBAAiB,GAAGR,+BAAcM,OAAd,CAAsBG,6BAAtB,CAAoDb,UAApD,EAAgEC,GAAhE,CAA1B;;AACA,UAAM,IAAIgB,KAAJ,CAAW,WAAUL,iBAAkB,OAAMT,eAAgB,EAA7D,CAAN;AACD;;AAED,QAAMY,mBAAmB,GAAG,MAAMX,+BAAcC,KAAd,CAAoBW,uBAApB,CAA4ChB,UAA5C,CAAlC;;AACA,MAAI,CAACe,mBAAL,EAA0B;AACxB,UAAM,IAAIE,KAAJ,CAAW,6DAA4DjB,UAAW,GAAlF,CAAN;AACD;;AACD,QAAMkB,eAAe,GAAG,MAAMd,+BAAce,QAAd,CAAuBC,wBAAvB,CAC5BL,mBAD4B,CAA9B;;AAIA,MAAI,CAACX,+BAAcM,OAAd,CAAsBsB,4BAAtB,CAAmDd,eAAnD,CAAL,EAA0E;AACxE,UAAM,IAAID,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF","sourcesContent":["import { AndroidConfig } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\n\nimport log from '../../../../log';\nimport { ensureValidVersions, getAccountName } from './common';\n\nexport async function configureUpdatesAsync(projectDir: string, exp: ExpoConfig): Promise<void> {\n  ensureValidVersions(exp);\n  const username = await getAccountName(exp);\n  const buildGradlePath = AndroidConfig.Paths.getAppBuildGradle(projectDir);\n  const buildGradleContent = await fs.readFile(buildGradlePath, 'utf8');\n\n  if (!AndroidConfig.Updates.isBuildGradleConfigured(buildGradleContent, projectDir, exp)) {\n    const gradleScriptApply = AndroidConfig.Updates.formatApplyLineForBuildGradle(projectDir, exp);\n\n    await fs.writeFile(\n      buildGradlePath,\n      `${buildGradleContent}\\n// Integration with Expo updates\\n${gradleScriptApply}\\n`\n    );\n  }\n\n  const androidManifestPath = await AndroidConfig.Paths.getAndroidManifestAsync(projectDir);\n  if (!androidManifestPath) {\n    throw new Error(`Could not find AndroidManifest.xml in project directory: \"${projectDir}\"`);\n  }\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(\n    androidManifestPath\n  );\n\n  if (!AndroidConfig.Updates.isMainApplicationMetaDataSynced(exp, androidManifest, username)) {\n    const result = await AndroidConfig.Updates.setUpdatesConfig(exp, androidManifest, username);\n\n    await AndroidConfig.Manifest.writeAndroidManifestAsync(androidManifestPath, result);\n  }\n}\n\nexport async function syncUpdatesConfigurationAsync(\n  projectDir: string,\n  exp: ExpoConfig\n): Promise<void> {\n  ensureValidVersions(exp);\n  const username = await getAccountName(exp);\n  try {\n    await ensureUpdatesConfiguredAsync(projectDir, exp);\n  } catch (error) {\n    log.error(\n      'expo-updates module is not configured. Please run \"expo eas:build:init\" first to configure the project'\n    );\n    throw error;\n  }\n\n  const androidManifestPath = await AndroidConfig.Paths.getAndroidManifestAsync(projectDir);\n  if (!androidManifestPath) {\n    throw new Error(`Could not find AndroidManifest.xml in project directory: \"${projectDir}\"`);\n  }\n  let androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(androidManifestPath);\n\n  if (!AndroidConfig.Updates.areVersionsSynced(exp, androidManifest)) {\n    androidManifest = AndroidConfig.Updates.setVersionsConfig(exp, androidManifest);\n    await AndroidConfig.Manifest.writeAndroidManifestAsync(androidManifestPath, androidManifest);\n  }\n\n  if (!AndroidConfig.Updates.isMainApplicationMetaDataSynced(exp, androidManifest, username)) {\n    log.warn(\n      'Native project configuration is not synced with values present in your app.json, run expo eas:build:init to make sure all values are applied in antive project'\n    );\n  }\n}\n\nasync function ensureUpdatesConfiguredAsync(projectDir: string, exp: ExpoConfig): Promise<void> {\n  const buildGradlePath = AndroidConfig.Paths.getAppBuildGradle(projectDir);\n  const buildGradleContent = await fs.readFile(buildGradlePath, 'utf8');\n\n  if (!AndroidConfig.Updates.isBuildGradleConfigured(buildGradleContent, projectDir, exp)) {\n    const gradleScriptApply = AndroidConfig.Updates.formatApplyLineForBuildGradle(projectDir, exp);\n    throw new Error(`Missing ${gradleScriptApply} in ${buildGradlePath}`);\n  }\n\n  const androidManifestPath = await AndroidConfig.Paths.getAndroidManifestAsync(projectDir);\n  if (!androidManifestPath) {\n    throw new Error(`Could not find AndroidManifest.xml in project directory: \"${projectDir}\"`);\n  }\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(\n    androidManifestPath\n  );\n\n  if (!AndroidConfig.Updates.isMainApplicationMetaDataSet(androidManifest)) {\n    throw new Error('Missing values in AndroidManifest.xml');\n  }\n}\n"],"file":"android.js"}