"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureUpdatesAsync = configureUpdatesAsync;
exports.syncUpdatesConfigurationAsync = syncUpdatesConfigurationAsync;

function _configPlugins() {
  const data = require("@expo/config-plugins");

  _configPlugins = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _common() {
  const data = require("./common");

  _common = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function configureUpdatesAsync(projectDir, exp) {
  (0, _common().ensureValidVersions)(exp);
  const username = await (0, _common().getAccountName)(exp);

  const buildGradlePath = _configPlugins().AndroidConfig.Paths.getAppBuildGradle(projectDir);

  const buildGradleContent = await _fsExtra().default.readFile(buildGradlePath, 'utf8');

  if (!_configPlugins().AndroidConfig.Updates.isBuildGradleConfigured(buildGradleContent, projectDir, exp)) {
    const gradleScriptApply = _configPlugins().AndroidConfig.Updates.formatApplyLineForBuildGradle(projectDir, exp);

    await _fsExtra().default.writeFile(buildGradlePath, `${buildGradleContent}\n// Integration with Expo updates\n${gradleScriptApply}\n`);
  }

  const androidManifestPath = await _configPlugins().AndroidConfig.Paths.getAndroidManifestAsync(projectDir);

  if (!androidManifestPath) {
    throw new Error(`Could not find AndroidManifest.xml in project directory: "${projectDir}"`);
  }

  const androidManifest = await _configPlugins().AndroidConfig.Manifest.readAndroidManifestAsync(androidManifestPath);

  if (!_configPlugins().AndroidConfig.Updates.isMainApplicationMetaDataSynced(exp, androidManifest, username)) {
    const result = await _configPlugins().AndroidConfig.Updates.setUpdatesConfig(exp, androidManifest, username);
    await _configPlugins().AndroidConfig.Manifest.writeAndroidManifestAsync(androidManifestPath, result);
  }
}

async function syncUpdatesConfigurationAsync(projectDir, exp) {
  (0, _common().ensureValidVersions)(exp);
  const username = await (0, _common().getAccountName)(exp);

  try {
    await ensureUpdatesConfiguredAsync(projectDir, exp);
  } catch (error) {
    _log().default.error('expo-updates module is not configured. Please run "expo eas:build:init" first to configure the project');

    throw error;
  }

  const androidManifestPath = await _configPlugins().AndroidConfig.Paths.getAndroidManifestAsync(projectDir);

  if (!androidManifestPath) {
    throw new Error(`Could not find AndroidManifest.xml in project directory: "${projectDir}"`);
  }

  let androidManifest = await _configPlugins().AndroidConfig.Manifest.readAndroidManifestAsync(androidManifestPath);

  if (!_configPlugins().AndroidConfig.Updates.areVersionsSynced(exp, androidManifest)) {
    androidManifest = _configPlugins().AndroidConfig.Updates.setVersionsConfig(exp, androidManifest);
    await _configPlugins().AndroidConfig.Manifest.writeAndroidManifestAsync(androidManifestPath, androidManifest);
  }

  if (!_configPlugins().AndroidConfig.Updates.isMainApplicationMetaDataSynced(exp, androidManifest, username)) {
    _log().default.warn('Native project configuration is not synced with values present in your app.json, run expo eas:build:init to make sure all values are applied in antive project');
  }
}

async function ensureUpdatesConfiguredAsync(projectDir, exp) {
  const buildGradlePath = _configPlugins().AndroidConfig.Paths.getAppBuildGradle(projectDir);

  const buildGradleContent = await _fsExtra().default.readFile(buildGradlePath, 'utf8');

  if (!_configPlugins().AndroidConfig.Updates.isBuildGradleConfigured(buildGradleContent, projectDir, exp)) {
    const gradleScriptApply = _configPlugins().AndroidConfig.Updates.formatApplyLineForBuildGradle(projectDir, exp);

    throw new Error(`Missing ${gradleScriptApply} in ${buildGradlePath}`);
  }

  const androidManifestPath = await _configPlugins().AndroidConfig.Paths.getAndroidManifestAsync(projectDir);

  if (!androidManifestPath) {
    throw new Error(`Could not find AndroidManifest.xml in project directory: "${projectDir}"`);
  }

  const androidManifest = await _configPlugins().AndroidConfig.Manifest.readAndroidManifestAsync(androidManifestPath);

  if (!_configPlugins().AndroidConfig.Updates.isMainApplicationMetaDataSet(androidManifest)) {
    throw new Error('Missing values in AndroidManifest.xml');
  }
}
//# sourceMappingURL=android.js.map