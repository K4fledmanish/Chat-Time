{"version":3,"sources":["../../../../../src/commands/eas-build/build/builders/AndroidBuilder.ts"],"names":["AndroidBuilder","constructor","ctx","setupAsync","ensureCredentialsAsync","credentialsPrepared","secretEnvs","commandCtx","projectDir","shouldLoadCredentials","provider","AndroidCredentialsProvider","projectName","accountName","nonInteractive","skipCredentialsCheck","initAsync","credentialsSource","buildProfile","workflow","credentials","getCredentialsAsync","ensureProjectConfiguredAsync","exp","isProjectConfigured","AndroidConfig","EasBuild","isEasBuildGradleConfiguredAsync","CommandError","startMessage","commitMessage","commitSuccessMessage","successMessage","configureProjectAsync","configureEasBuildAsync","easGradlePath","getEasBuildGradlePath","intentToAdd","prepareJobAsync","archiveUrl","Error","Workflow","Generic","prepareGenericJobAsync","Managed","prepareManagedJobAsync","prepareJobCommonAsync","buildCredentials","keystore","dataBase64","keystorePassword","keyAlias","keyPassword","platform","Platform","Android","projectUrl","secrets","projectRootDirectory","path","relative","process","cwd","type","gradleCommand","artifactPath","releaseChannel","_buildProfile","withoutCredentials"],"mappings":"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","sourcesContent":["import { AndroidConfig } from '@expo/config-plugins';\nimport { Android, Job, Platform, sanitizeJob, Workflow } from '@expo/eas-build-job';\nimport path from 'path';\n\nimport CommandError from '../../../../CommandError';\nimport { readSecretEnvsAsync } from '../../../../credentials/credentialsJson/read';\nimport AndroidCredentialsProvider, {\n  AndroidCredentials,\n} from '../../../../credentials/provider/AndroidCredentialsProvider';\nimport {\n  AndroidGenericBuildProfile,\n  AndroidManagedBuildProfile,\n  CredentialsSource,\n} from '../../../../easJson';\nimport { gitAddAsync, gitRootDirectory } from '../../../../git';\nimport { Builder, BuilderContext } from '../../types';\nimport {\n  configureUpdatesAsync,\n  syncUpdatesConfigurationAsync,\n} from '../../utils/expoUpdates/android';\nimport { isExpoUpdatesInstalled } from '../../utils/expoUpdates/common';\nimport { modifyAndCommitAsync } from '../../utils/git';\nimport { ensureCredentialsAsync } from '../credentials';\n\ninterface CommonJobProperties {\n  platform: Platform.Android;\n  projectUrl: string;\n  secrets: {\n    buildCredentials?: {\n      keystore: Android.Keystore;\n    };\n    secretEnvs?: Record<string, string>;\n  };\n}\n\nclass AndroidBuilder implements Builder<Platform.Android> {\n  private credentials?: AndroidCredentials;\n  private secretEnvs?: Record<string, string>;\n  private credentialsPrepared: boolean = false;\n\n  constructor(public readonly ctx: BuilderContext<Platform.Android>) {}\n\n  public async setupAsync(): Promise<void> {}\n\n  public async ensureCredentialsAsync(): Promise<\n    CredentialsSource.LOCAL | CredentialsSource.REMOTE | undefined\n  > {\n    this.credentialsPrepared = true;\n    this.secretEnvs = await readSecretEnvsAsync(this.ctx.commandCtx.projectDir);\n\n    if (!this.shouldLoadCredentials()) {\n      return;\n    }\n    const provider = new AndroidCredentialsProvider(\n      this.ctx.commandCtx.projectDir,\n      {\n        projectName: this.ctx.commandCtx.projectName,\n        accountName: this.ctx.commandCtx.accountName,\n      },\n      {\n        nonInteractive: this.ctx.commandCtx.nonInteractive,\n        skipCredentialsCheck: this.ctx.commandCtx.skipCredentialsCheck,\n      }\n    );\n    await provider.initAsync();\n    const credentialsSource = await ensureCredentialsAsync(\n      provider,\n      this.ctx.buildProfile.workflow,\n      this.ctx.buildProfile.credentialsSource,\n      this.ctx.commandCtx.nonInteractive\n    );\n    this.credentials = await provider.getCredentialsAsync(credentialsSource);\n    return credentialsSource;\n  }\n\n  public async ensureProjectConfiguredAsync(): Promise<void> {\n    const { projectDir, exp, nonInteractive } = this.ctx.commandCtx;\n\n    const isProjectConfigured = await AndroidConfig.EasBuild.isEasBuildGradleConfiguredAsync(\n      projectDir\n    );\n    if (!isProjectConfigured) {\n      throw new CommandError(\n        'Project is not configured. Please run \"expo eas:build:init\" first to configure the project'\n      );\n    }\n\n    await modifyAndCommitAsync(\n      async () => {\n        if (isExpoUpdatesInstalled(projectDir)) {\n          await syncUpdatesConfigurationAsync(projectDir, exp);\n        }\n      },\n      {\n        startMessage: 'Making sure runtime version is correct on Android',\n        commitMessage: 'Set runtime version in Android project',\n        commitSuccessMessage: 'Successfully committed the configuration changes',\n        successMessage: 'We updated the runtime version in your Android project',\n        nonInteractive,\n      }\n    );\n  }\n\n  public async configureProjectAsync(): Promise<void> {\n    const { projectDir, exp, nonInteractive } = this.ctx.commandCtx;\n\n    await modifyAndCommitAsync(\n      async () => {\n        await AndroidConfig.EasBuild.configureEasBuildAsync(projectDir);\n        const easGradlePath = AndroidConfig.EasBuild.getEasBuildGradlePath(projectDir);\n        await gitAddAsync(easGradlePath, { intentToAdd: true });\n\n        if (isExpoUpdatesInstalled(projectDir)) {\n          await configureUpdatesAsync(projectDir, exp);\n        }\n      },\n      {\n        startMessage: 'Configuring the Android project',\n        commitMessage: 'Configure Android project',\n        commitSuccessMessage: 'Successfully committed the configuration changes',\n        successMessage: 'We configured your Android project to build it on the Expo servers',\n        nonInteractive,\n      }\n    );\n  }\n\n  public async prepareJobAsync(archiveUrl: string): Promise<Job> {\n    if (!this.credentialsPrepared) {\n      throw new Error('ensureCredentialsAsync should be called before prepareJobAsync');\n    }\n    if (this.ctx.buildProfile.workflow === Workflow.Generic) {\n      return sanitizeJob(await this.prepareGenericJobAsync(archiveUrl, this.ctx.buildProfile));\n    } else if (this.ctx.buildProfile.workflow === Workflow.Managed) {\n      return sanitizeJob(await this.prepareManagedJobAsync(archiveUrl, this.ctx.buildProfile));\n    } else {\n      throw new Error(\"Unknown workflow. Shouldn't happen\");\n    }\n  }\n\n  private async prepareJobCommonAsync(archiveUrl: string): Promise<Partial<CommonJobProperties>> {\n    const buildCredentials = this.credentials\n      ? {\n          buildCredentials: {\n            keystore: {\n              dataBase64: this.credentials.keystore.keystore,\n              keystorePassword: this.credentials.keystore.keystorePassword,\n              keyAlias: this.credentials.keystore.keyAlias,\n              keyPassword: this.credentials.keystore.keyPassword,\n            },\n          },\n        }\n      : {};\n\n    return {\n      platform: Platform.Android,\n      projectUrl: archiveUrl,\n      secrets: {\n        ...(this.secretEnvs ? { secretEnvs: this.secretEnvs } : {}),\n        ...buildCredentials,\n      },\n    };\n  }\n\n  private async prepareGenericJobAsync(\n    archiveUrl: string,\n    buildProfile: AndroidGenericBuildProfile\n  ): Promise<Partial<Android.GenericJob>> {\n    const projectRootDirectory = path.relative(await gitRootDirectory(), process.cwd()) || '.';\n    return {\n      ...(await this.prepareJobCommonAsync(archiveUrl)),\n      type: Workflow.Generic,\n      gradleCommand: buildProfile.gradleCommand,\n      artifactPath: buildProfile.artifactPath,\n      releaseChannel: buildProfile.releaseChannel,\n      projectRootDirectory,\n    };\n  }\n\n  private async prepareManagedJobAsync(\n    archiveUrl: string,\n    _buildProfile: AndroidManagedBuildProfile\n  ): Promise<Partial<Android.ManagedJob>> {\n    const projectRootDirectory = path.relative(await gitRootDirectory(), process.cwd()) || '.';\n    return {\n      ...(await this.prepareJobCommonAsync(archiveUrl)),\n      type: Workflow.Managed,\n      projectRootDirectory,\n    };\n  }\n\n  private shouldLoadCredentials(): boolean {\n    return (\n      this.ctx.buildProfile.workflow === Workflow.Managed ||\n      (this.ctx.buildProfile.workflow === Workflow.Generic &&\n        !this.ctx.buildProfile.withoutCredentials)\n    );\n  }\n}\n\nexport default AndroidBuilder;\n"],"file":"AndroidBuilder.js"}