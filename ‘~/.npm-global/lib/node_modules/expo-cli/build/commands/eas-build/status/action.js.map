{"version":3,"sources":["../../../../src/commands/eas-build/status/action.ts"],"names":["statusAction","projectDir","platform","status","buildId","Error","platforms","Object","values","BuildCommandPlatform","statuses","BuildStatus","includes","map","p","log","chalk","bold","join","s","user","UserManager","ensureLoggedInAsync","exp","accountName","projectName","slug","projectId","Analytics","logEvent","AnalyticsEvent","BUILD_STATUS_COMMAND","project_id","account_name","project_name","requested_platform","client","ApiV2","clientForUser","spinner","start","builds","buildStatus","getAsync","undefined","params","ANDROID","IOS","e","fail","message","length","succeed","printBuildTable","headers","colWidths","refactoredBuilds","build","buildUrl","FINISHED","artifacts","started","Intl","DateTimeFormat","year","month","day","hour","minute","format","Date","createdAt","replace","artifact","terminalLink","buildTable"],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport { ApiV2, UserManager } from '@expo/xdl';\nimport ora from 'ora';\n\nimport log from '../../../log';\nimport { ensureProjectExistsAsync, getProjectOwner } from '../../../projects';\nimport { printTableJsonArray } from '../../utils/cli-table';\nimport { AnalyticsEvent, Build, BuildCommandPlatform, BuildStatus } from '../types';\nimport Analytics from '../utils/analytics';\n\ninterface BuildStatusOptions {\n  platform: BuildCommandPlatform;\n  buildId?: string;\n  status?: BuildStatus;\n}\n\nasync function statusAction(\n  projectDir: string,\n  { platform, status, buildId }: BuildStatusOptions\n): Promise<void> {\n  if (buildId) {\n    if (platform) {\n      throw new Error('-p/--platform cannot be specified if --build-id is specified.');\n    }\n\n    if (status) {\n      throw new Error('-s/--status cannot be specified if --build-id is specified.');\n    }\n  } else {\n    const platforms = Object.values(BuildCommandPlatform);\n    const statuses = Object.values(BuildStatus);\n\n    if (platform && !platforms.includes(platform)) {\n      throw new Error(\n        `-p/--platform needs to be one of: ${platforms.map(p => log.chalk.bold(p)).join(', ')}`\n      );\n    }\n\n    if (status && !statuses.includes(status)) {\n      throw new Error(\n        `-s/--status needs to be one of: ${statuses.map(s => log.chalk.bold(s)).join(', ')}`\n      );\n    }\n  }\n\n  const user = await UserManager.ensureLoggedInAsync();\n  const { exp } = getConfig(projectDir);\n\n  const accountName = getProjectOwner(user, exp);\n  const projectName = exp.slug;\n\n  const projectId = await ensureProjectExistsAsync(user, {\n    accountName,\n    projectName,\n  });\n\n  Analytics.logEvent(AnalyticsEvent.BUILD_STATUS_COMMAND, {\n    project_id: projectId,\n    account_name: accountName,\n    project_name: projectName,\n    requested_platform: platform,\n  });\n\n  const client = ApiV2.clientForUser(user);\n\n  const spinner = ora().start('Fetching build history...');\n\n  let builds: Build[] | undefined;\n\n  try {\n    if (buildId) {\n      const buildStatus = await client.getAsync(`projects/${projectId}/builds/${buildId}`);\n      builds = buildStatus ? [buildStatus] : undefined;\n    } else {\n      const params = {\n        ...([BuildCommandPlatform.ANDROID, BuildCommandPlatform.IOS].includes(platform)\n          ? { platform }\n          : null),\n        ...(status ? { status } : null),\n      };\n\n      const buildStatus = await client.getAsync(`projects/${projectId}/builds`, params);\n      builds = buildStatus?.builds;\n    }\n  } catch (e) {\n    spinner.fail(e.message);\n    throw new Error('Error getting current build status for this project.');\n  }\n\n  if (!builds?.length) {\n    spinner.succeed('No currently active or previous builds for this project.');\n  } else {\n    spinner.succeed(`Found ${builds.length} builds for this project.`);\n    printBuildTable(builds);\n  }\n}\n\nfunction printBuildTable(builds: Build[]) {\n  const headers = ['started', 'platform', 'status', 'artifact'];\n  const colWidths = [24, 10, 13];\n\n  const refactoredBuilds = builds.map(build => {\n    const buildUrl = build.status === BuildStatus.FINISHED ? build.artifacts?.buildUrl : undefined;\n\n    return {\n      started: new Intl.DateTimeFormat('en', {\n        year: 'numeric',\n        month: 'short',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n      }).format(new Date(build.createdAt)),\n      platform: build.platform,\n      status: build.status.replace(/-/g, ' '),\n      artifact: buildUrl ? log.terminalLink(buildUrl, buildUrl) : '-------',\n    };\n  });\n\n  const buildTable = printTableJsonArray(headers, refactoredBuilds, colWidths);\n\n  log(buildTable);\n}\n\nexport default statusAction;\n"],"file":"action.js"}