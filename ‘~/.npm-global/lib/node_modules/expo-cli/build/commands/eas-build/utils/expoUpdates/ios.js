"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureUpdatesAsync = configureUpdatesAsync;
exports.syncUpdatesConfigurationAsync = syncUpdatesConfigurationAsync;
exports.ensureUpdatesConfiguredAsync = ensureUpdatesConfiguredAsync;

function _configPlugins() {
  const data = require("@expo/config-plugins");

  _configPlugins = function () {
    return data;
  };

  return data;
}

function _plist() {
  const data = _interopRequireDefault(require("@expo/plist"));

  _plist = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _git() {
  const data = require("../../../../git");

  _git = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _common() {
  const data = require("./common");

  _common = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function configureUpdatesAsync(projectDir, exp) {
  (0, _common().ensureValidVersions)(exp);
  const username = await (0, _common().getAccountName)(exp);

  let xcodeProject = _configPlugins().IOSConfig.XcodeUtils.getPbxproj(projectDir);

  if (!_configPlugins().IOSConfig.Updates.isShellScriptBuildPhaseConfigured(projectDir, exp, xcodeProject)) {
    xcodeProject = _configPlugins().IOSConfig.Updates.ensureBundleReactNativePhaseContainsConfigurationScript(projectDir, exp, xcodeProject);
    await _fsExtra().default.writeFile(_configPlugins().IOSConfig.Paths.getPBXProjectPath(projectDir), xcodeProject.writeSync());
  }

  let expoPlist = await readExpoPlistAsync(projectDir);

  if (!_configPlugins().IOSConfig.Updates.isPlistConfigurationSynced(exp, expoPlist, username)) {
    expoPlist = _configPlugins().IOSConfig.Updates.setUpdatesConfig(exp, expoPlist, username);
    await writeExpoPlistAsync(projectDir, expoPlist);
  } // TODO: ensure ExpoPlist in pbxproj

}

async function syncUpdatesConfigurationAsync(projectDir, exp) {
  (0, _common().ensureValidVersions)(exp);
  const username = await (0, _common().getAccountName)(exp);

  try {
    await ensureUpdatesConfiguredAsync(projectDir, exp);
  } catch (error) {
    _log().default.error('expo-updates module is not configured. Please run "expo eas:build:init" first to configure the project');

    throw error;
  }

  let expoPlist = await readExpoPlistAsync(projectDir);

  if (!_configPlugins().IOSConfig.Updates.isPlistVersionConfigurationSynced(exp, expoPlist)) {
    expoPlist = _configPlugins().IOSConfig.Updates.setVersionsConfig(exp, expoPlist);
    await writeExpoPlistAsync(projectDir, expoPlist);
  }

  if (!_configPlugins().IOSConfig.Updates.isPlistConfigurationSynced(exp, expoPlist, username)) {
    _log().default.warn('Native project configuration is not synced with values present in you app.json, run expo eas:build:init to make sure all values are applied in antive project');
  }
}

async function ensureUpdatesConfiguredAsync(projectDir, exp) {
  const xcodeProject = _configPlugins().IOSConfig.XcodeUtils.getPbxproj(projectDir);

  if (!_configPlugins().IOSConfig.Updates.isShellScriptBuildPhaseConfigured(projectDir, exp, xcodeProject)) {
    const script = 'expo-updates/scripts/create-manifest-ios.sh';
    const buildPhase = '"Bundle React Native code and images"';
    throw new Error(`Path to ${script} is missing in a ${buildPhase} build phase.`);
  }

  const expoPlist = await readExpoPlistAsync(projectDir);

  if (!_configPlugins().IOSConfig.Updates.isPlistConfigurationSet(expoPlist)) {
    throw new Error('Missing values in Expo.plist');
  }
}

async function readExpoPlistAsync(projectDir) {
  const expoPlistPath = _configPlugins().IOSConfig.Paths.getExpoPlistPath(projectDir);

  let expoPlist = {};

  if (await _fsExtra().default.pathExists(expoPlistPath)) {
    const expoPlistContent = await _fsExtra().default.readFile(expoPlistPath, 'utf8');
    expoPlist = _plist().default.parse(expoPlistContent);
  }

  return expoPlist;
}

async function writeExpoPlistAsync(projectDir, expoPlist) {
  const expoPlistPath = _configPlugins().IOSConfig.Paths.getExpoPlistPath(projectDir);

  const expoPlistContent = _plist().default.build(expoPlist);

  await _fsExtra().default.mkdirp(_path().default.dirname(expoPlistPath));
  await _fsExtra().default.writeFile(expoPlistPath, expoPlistContent);
  await (0, _git().gitAddAsync)(expoPlistPath, {
    intentToAdd: true
  });
}
//# sourceMappingURL=ios.js.map