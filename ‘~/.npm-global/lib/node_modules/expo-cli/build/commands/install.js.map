{"version":3,"sources":["../../src/commands/install.ts"],"names":["resolveExpoProjectRootAsync","info","process","cwd","projectRoot","error","code","log","addNewLineIfNone","message","newLine","chalk","cyan","bold","SilentError","installAsync","packages","options","packageManager","PackageManager","createForProject","npm","yarn","exp","pkg","skipSDKVersionRequirement","dependencies","addAsync","sdkVersion","CommandError","name","toLowerCase","Versions","gteSdkVersion","fs","existsSync","path","join","nodeModulesPath","bundledNativeModulesPath","bundledNativeModules","JsonFile","readAsync","nativeModules","others","versionedPackages","map","arg","spec","includes","type","version","modifiedSpec","push","raw","messages","length","install","program","command","alias","helpGroup","option","description","asyncAction"],"mappings":"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","sourcesContent":["import { getConfig, projectHasModule } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport * as PackageManager from '@expo/package-manager';\nimport { Versions } from '@expo/xdl';\nimport { Command } from 'commander';\nimport fs from 'fs';\nimport npmPackageArg from 'npm-package-arg';\nimport path from 'path';\n\nimport CommandError, { SilentError } from '../CommandError';\nimport log from '../log';\nimport { findProjectRootAsync } from './utils/ProjectUtils';\n\nasync function resolveExpoProjectRootAsync() {\n  try {\n    const info = await findProjectRootAsync(process.cwd());\n    return info.projectRoot;\n  } catch (error) {\n    if (error.code !== 'NO_PROJECT') {\n      // An unknown error occurred.\n      throw error;\n    }\n    // This happens when an app.config exists but a package.json is not present.\n    log.addNewLineIfNone();\n    log.error(error.message);\n    log.newLine();\n    log(log.chalk.cyan(`You can create a new project with ${log.chalk.bold(`expo init`)}`));\n    log.newLine();\n    throw new SilentError(error);\n  }\n}\n\nasync function installAsync(packages: string[], options: PackageManager.CreateForProjectOptions) {\n  const projectRoot = await resolveExpoProjectRootAsync();\n\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    npm: options.npm,\n    yarn: options.yarn,\n    log,\n  });\n\n  const { exp, pkg } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  // If using `expo install` in a project without the expo package even listed\n  // in package.json, just fall through to npm/yarn.\n  //\n  if (!pkg.dependencies['expo']) {\n    return await packageManager.addAsync(...packages);\n  }\n\n  if (!exp.sdkVersion) {\n    log.addNewLineIfNone();\n    throw new CommandError(\n      `The ${log.chalk.bold(`expo`)} package was found in your ${log.chalk.bold(\n        `package.json`\n      )} but we couldn't resolve the Expo SDK version. Run ${log.chalk.bold(\n        `${packageManager.name.toLowerCase()} install`\n      )} and then try this command again.\\n`\n    );\n  }\n\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    const message = `${log.chalk.bold(\n      `expo install`\n    )} is only available for Expo SDK version 33 or higher.`;\n    log.addNewLineIfNone();\n    log.error(message);\n    log.newLine();\n    log(log.chalk.cyan(`Current version: ${log.chalk.bold(exp.sdkVersion)}`));\n    log.newLine();\n    throw new SilentError(message);\n  }\n\n  // This shouldn't be invoked because `findProjectRootAsync` will throw if node_modules are missing.\n  if (!fs.existsSync(path.join(exp.nodeModulesPath || projectRoot, 'node_modules'))) {\n    log.addNewLineIfNone();\n    log(log.chalk.cyan(`node_modules not found, running ${packageManager.name} install command.`));\n    log.newLine();\n    await packageManager.installAsync();\n  }\n\n  const bundledNativeModulesPath = projectHasModule(\n    'expo/bundledNativeModules.json',\n    projectRoot,\n    exp\n  );\n\n  if (!bundledNativeModulesPath) {\n    log.addNewLineIfNone();\n    throw new CommandError(\n      `The dependency map ${log.chalk.bold(\n        `expo/bundledNativeModules.json`\n      )} cannot be found, please ensure you have the package \"${log.chalk\n        .bold`expo`}\" installed in your project.\\n`\n    );\n  }\n\n  const bundledNativeModules = await JsonFile.readAsync(bundledNativeModulesPath);\n\n  const nativeModules = [];\n  const others = [];\n  const versionedPackages = packages.map(arg => {\n    const spec = npmPackageArg(arg);\n    const { name } = spec;\n    if (['tag', 'version', 'range'].includes(spec.type) && name && bundledNativeModules[name]) {\n      // Unimodule packages from npm registry are modified to use the bundled version.\n      const version = bundledNativeModules[name];\n      const modifiedSpec = `${name}@${version}`;\n      nativeModules.push(modifiedSpec);\n      return modifiedSpec;\n    } else {\n      // Other packages are passed through unmodified.\n      others.push(spec.raw);\n      return spec.raw;\n    }\n  });\n  const messages = [];\n  if (nativeModules.length > 0) {\n    messages.push(\n      `${nativeModules.length} SDK ${exp.sdkVersion} compatible native ${\n        nativeModules.length === 1 ? 'module' : 'modules'\n      }`\n    );\n  }\n  if (others.length > 0) {\n    messages.push(`${others.length} other ${others.length === 1 ? 'package' : 'packages'}`);\n  }\n  log(`Installing ${messages.join(' and ')} using ${packageManager.name}.`);\n  await packageManager.addAsync(...versionedPackages);\n}\n\nexport default function install(program: Command) {\n  program\n    .command('install [packages...]')\n    .alias('add')\n    .helpGroup('core')\n    .option('--npm', 'Use npm to install dependencies. (default when package-lock.json exists)')\n    .option('--yarn', 'Use Yarn to install dependencies. (default when yarn.lock exists)')\n    .description('Install a unimodule or other package to a project')\n    .asyncAction(installAsync);\n}\n"],"file":"install.js"}