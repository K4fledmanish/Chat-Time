"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.actionAsync = actionAsync;
exports.default = _default;

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _CommandError() {
  const data = _interopRequireDefault(require("../CommandError"));

  _CommandError = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _prompts() {
  const data = require("../prompts");

  _prompts = function () {
    return data;
  };

  return data;
}

function Eject() {
  const data = _interopRequireWildcard(require("./eject/Eject"));

  Eject = function () {
    return data;
  };

  return data;
}

function LegacyEject() {
  const data = _interopRequireWildcard(require("./eject/LegacyEject"));

  LegacyEject = function () {
    return data;
  };

  return data;
}

function _TerminalLink() {
  const data = require("./utils/TerminalLink");

  _TerminalLink = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function userWantsToEjectWithoutUpgradingAsync() {
  const answer = await (0, _prompts().confirmAsync)({
    message: `We recommend upgrading to the latest SDK version before ejecting. SDK 37 introduces support for OTA updates and notifications in ejected projects, and includes many features that make ejecting your project easier. Would you like to continue ejecting anyways?`
  });
  return answer;
}

function getDefaultPlatforms() {
  const platforms = ['android'];

  if (process.platform !== 'win32') {
    platforms.push('ios');
  }

  return platforms;
}

function platformsFromPlatform(platform) {
  if (!platform) {
    return getDefaultPlatforms();
  }

  switch (platform) {
    case 'ios':
      if (process.platform === 'win32') {
        _log().default.warn('Ejecting on windows is unsupported'); // continue anyways :shrug:

      }

      return ['ios'];

    case 'android':
      return ['android'];

    case 'all':
      return getDefaultPlatforms();

    default:
      throw new (_CommandError().default)(`Unsupported platform "${platform}". Options are: ios, android, all`);
  }
}

async function actionAsync(projectDir, {
  platform,
  ...options
}) {
  const {
    exp
  } = (0, _config().getConfig)(projectDir);

  if (options.npm) {
    options.packageManager = 'npm';
  } // Set EXPO_VIEW_DIR to universe/exponent to pull expo view code locally instead of from S3 for ExpoKit
  // TODO: remove LegacyEject when SDK 36 is no longer supported: after SDK 40 is released.


  if (_xdl().Versions.lteSdkVersion(exp, '36.0.0')) {
    if (options.force || (await userWantsToEjectWithoutUpgradingAsync())) {
      _log().default.debug('Eject Mode: Legacy');

      await LegacyEject().ejectAsync(projectDir, options);
    }
  } else {
    _log().default.debug('Eject Mode: Latest');

    await Eject().ejectAsync(projectDir, { ...options,
      platforms: platformsFromPlatform(platform)
    });
  }
}

function _default(program) {
  program.command('eject [path]').description(`Create native iOS and Android project files. ${_chalk().default.dim((0, _TerminalLink().learnMore)('https://docs.expo.io/bare/customizing/'))}`).longDescription('Create Xcode and Android Studio projects for your app. Use this if you need to add custom native functionality.').helpGroup('eject').option('--force', 'Skip legacy eject warnings.') // TODO: remove the force flag when SDK 36 is no longer supported: after SDK 40 is released.
  .option('--no-install', 'Skip installing npm packages and CocoaPods.').option('--npm', 'Use npm to install dependencies. (default when Yarn is not installed)').option('-p, --platform [platform]', 'Platforms to sync: ios, android, all. Default: all').asyncActionProjectDir(actionAsync);
}
//# sourceMappingURL=eject.js.map