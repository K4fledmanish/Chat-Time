{"version":3,"sources":["../../src/commands/send.ts"],"names":["action","projectRoot","options","urlOpts","optsAsync","url","UrlUtils","constructManifestUrlAsync","log","nested","chalk","underline","handleMobileOptsAsync","recipient","sendTo","UserSettings","getAsync","sendUrlAsync","program","command","description","helpGroup","option","asyncActionProjectDir"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAIA,eAAeA,MAAf,CAAsBC,WAAtB,EAA2CC,OAA3C,EAA6D;AAC3D,QAAMC,mBAAQC,SAAR,CAAkBH,WAAlB,EAA+BC,OAA/B,CAAN;AAEA,QAAMG,GAAG,GAAG,MAAMC,gBAASC,yBAAT,CAAmCN,WAAnC,CAAlB;;AAEAO,iBAAIC,MAAJ,CAAW,6BAA6BC,iBAAMC,SAAN,CAAgBN,GAAhB,CAA7B,GAAoD,IAA/D;;AAEA,MAAI,MAAMF,mBAAQS,qBAAR,CAA8BX,WAA9B,EAA2CC,OAA3C,CAAV,EAA+D;AAC7D;AACD;;AAED,MAAIW,SAAS,GACX,OAAOX,OAAO,CAACY,MAAf,KAA0B,SAA1B,GACIZ,OAAO,CAACY,MADZ,GAEI,MAAMC,oBAAaC,QAAb,CAAsB,QAAtB,EAAgC,IAAhC,CAHZ;;AAKA,MAAI,CAACH,SAAL,EAAgB;AACdA,IAAAA,SAAS,GAAG,MAAM,mCAAlB;AACD;;AAED,QAAMC,MAAM,GAACG,YAAP,CAAoBZ,GAApB,EAAyBQ,SAAzB,CAAN;AACD;;AAEc,kBAAUK,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJC,OADH,CACW,aADX,EAEGC,WAFH,CAEgB,6CAFhB,EAGGC,SAHH,CAGa,MAHb,EAIGC,MAJH,CAIU,sBAJV,EAIkC,kCAJlC,EAKGnB,OALH,GAMGoB,qBANH,CAMyBvB,MANzB;AAOD","sourcesContent":["import { UrlUtils, UserSettings } from '@expo/xdl';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\n\nimport { askForSendToAsync } from '../askUser';\nimport log from '../log';\nimport * as sendTo from '../sendTo';\nimport urlOpts, { URLOptions } from '../urlOpts';\n\ntype Options = URLOptions & { sendTo?: string };\n\nasync function action(projectRoot: string, options: Options) {\n  await urlOpts.optsAsync(projectRoot, options);\n\n  const url = await UrlUtils.constructManifestUrlAsync(projectRoot);\n\n  log.nested('Project manifest URL\\n\\n' + chalk.underline(url) + '\\n');\n\n  if (await urlOpts.handleMobileOptsAsync(projectRoot, options)) {\n    return;\n  }\n\n  let recipient =\n    typeof options.sendTo !== 'boolean'\n      ? options.sendTo\n      : await UserSettings.getAsync('sendTo', null);\n\n  if (!recipient) {\n    recipient = await askForSendToAsync();\n  }\n\n  await sendTo.sendUrlAsync(url, recipient);\n}\n\nexport default function (program: Command) {\n  program\n    .command('send [path]')\n    .description(`Share the project's URL to an email address`)\n    .helpGroup('core')\n    .option('-s, --send-to [dest]', 'Email address to send the URL to')\n    .urlOpts()\n    .asyncActionProjectDir(action);\n}\n"],"file":"send.js"}