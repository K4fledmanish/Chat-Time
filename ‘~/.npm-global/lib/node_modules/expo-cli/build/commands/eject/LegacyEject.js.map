{"version":3,"sources":["../../../src/commands/eject/LegacyEject.ts"],"names":["EXPO_APP_ENTRY","warnIfDependenciesRequireAdditionalSetupAsync","projectRoot","exp","pkg","skipSDKVersionRequirement","pkgsWithExtraSetup","JsonFile","readAsync","packagesToWarn","Object","keys","dependencies","filter","pkgName","hasOwnProperty","length","plural","log","nested","chalk","yellow","bold","forEach","ejectAsync","options","reactNativeOptionMessage","questions","type","name","message","dim","choices","title","value","ejectMethod","nonInteractiveHelp","ejectToBareAsync","green","newLine","packageManager","PackageManager","isUsingYarn","Detach","detachAsync","Error","ensureDependenciesMap","outputMap","key","JSON","stringify","useYarn","npmOrYarn","configPath","configName","configBuffer","fse","readFile","appJson","parse","toString","sdkVersion","Versions","gteSdkVersion","sdkMajorVersionNumber","semver","major","templateSpec","pacote","manifest","e","code","displayName","getAppNamesAsync","expo","entryPoint","writeFile","path","resolve","defaultDependencies","defaultDevDependencies","tempDir","temporary","directory","Exp","extractTemplateAppAsync","copySync","join","devDependencies","read","red","process","exit","scripts","eject","start","ios","android","lteSdkVersion","postinstall","bgYellow","black","combinedDependencies","dependenciesKey","combinedDevDependencies","main","indexjs","grey","remove","createForProject","installAsync","bundleIdentifier","IosWorkspace","setBundleIdentifier","initial","validate","stripDashes","undefined","includes","s","replace"],"mappings":"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","sourcesContent":["import { findConfigFile, getConfig, readConfigJsonAsync, resolveModule } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport * as PackageManager from '@expo/package-manager';\nimport { Detach, Exp, IosWorkspace, Versions } from '@expo/xdl';\nimport chalk from 'chalk';\nimport fse from 'fs-extra';\nimport npmPackageArg from 'npm-package-arg';\nimport pacote from 'pacote';\nimport path from 'path';\nimport semver from 'semver';\nimport temporary from 'tempy';\n\nimport { loginOrRegisterIfLoggedOutAsync } from '../../accounts';\nimport log from '../../log';\nimport prompt, { Question } from '../../prompts';\nimport { validateGitStatusAsync } from '../utils/ProjectUtils';\nimport { learnMore } from '../utils/TerminalLink';\n\ntype ValidationErrorMessage = string;\n\ntype DependenciesMap = { [key: string]: string | number };\n\nexport type EjectAsyncOptions = {\n  ejectMethod: 'bare' | 'expokit' | 'cancel';\n  verbose?: boolean;\n  force?: boolean;\n  packageManager?: 'npm' | 'yarn';\n};\n\nconst EXPO_APP_ENTRY = 'node_modules/expo/AppEntry.js';\n\nasync function warnIfDependenciesRequireAdditionalSetupAsync(projectRoot: string): Promise<void> {\n  // We just need the custom `nodeModulesPath` from the config.\n  const { exp, pkg } = await getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  const pkgsWithExtraSetup = await JsonFile.readAsync(\n    resolveModule('expo/requiresExtraSetup.json', projectRoot, exp)\n  );\n  const packagesToWarn: string[] = Object.keys(pkg.dependencies).filter(pkgName =>\n    pkgsWithExtraSetup.hasOwnProperty(pkgName)\n  );\n\n  if (packagesToWarn.length === 0) {\n    return;\n  }\n\n  const plural = packagesToWarn.length > 1;\n  log.nested('');\n  log.nested(\n    chalk.yellow(\n      `Warning: your app includes ${chalk.bold(`${packagesToWarn.length}`)} package${\n        plural ? 's' : ''\n      } that require${plural ? '' : 's'} additional setup. See the following URL${\n        plural ? 's' : ''\n      } for instructions.`\n    )\n  );\n  log.nested(\n    chalk.yellow(\n      `Your app may not build/run until the additional setup for ${\n        plural ? 'these packages' : 'this package'\n      } has been completed.`\n    )\n  );\n  log.nested('');\n  packagesToWarn.forEach(pkgName => {\n    log.nested(chalk.yellow(`- ${chalk.bold(pkgName)}: ${pkgsWithExtraSetup[pkgName]}`));\n  });\n  log.nested('');\n}\n\nexport async function ejectAsync(projectRoot: string, options: EjectAsyncOptions) {\n  await validateGitStatusAsync();\n  log.nested('');\n\n  const reactNativeOptionMessage = \"Bare: I'd like a bare React Native project.\";\n\n  const questions: Question = {\n    type: 'select',\n    name: 'ejectMethod',\n    message: `How would you like to eject your app?\\n  ${chalk.dim(\n      learnMore('https://docs.expo.io/expokit/eject/')\n    )}`,\n    choices: [\n      {\n        title: reactNativeOptionMessage,\n        value: 'bare',\n      },\n      {\n        title:\n          \"ExpoKit: I'll create or log in with an Expo account to use React Native and the Expo SDK.\",\n        value: 'expokit',\n      },\n      {\n        title: \"Cancel: I'll continue with my current project structure.\",\n        value: 'cancel',\n      },\n    ],\n  };\n\n  const ejectMethod =\n    options.ejectMethod ||\n    (\n      await prompt(questions, {\n        nonInteractiveHelp:\n          'Please specify eject method (bare, expokit) with the --eject-method option.',\n      })\n    ).ejectMethod;\n\n  if (ejectMethod === 'bare') {\n    await ejectToBareAsync(projectRoot);\n    log.nested(chalk.green('Ejected successfully!'));\n    log.newLine();\n    log.nested(\n      `Before running your app on iOS, make sure you have CocoaPods installed and initialize the project:`\n    );\n    log.nested('');\n    log.nested(`  cd ios`);\n    log.nested(`  pod install`);\n    log.nested('');\n    log.nested('Then you can run the project:');\n    log.nested('');\n    const packageManager = PackageManager.isUsingYarn(projectRoot) ? 'yarn' : 'npm';\n    log.nested(`  ${packageManager === 'npm' ? 'npm run android' : 'yarn android'}`);\n    log.nested(`  ${packageManager === 'npm' ? 'npm run ios' : 'yarn ios'}`);\n    await warnIfDependenciesRequireAdditionalSetupAsync(projectRoot);\n  } else if (ejectMethod === 'expokit') {\n    await loginOrRegisterIfLoggedOutAsync();\n    await Detach.detachAsync(projectRoot, options);\n    log(chalk.green('Ejected successfully!'));\n  } else if (ejectMethod === 'cancel') {\n    // we don't want to print the survey for cancellations\n    log('OK! If you change your mind you can run this command again.');\n  } else {\n    throw new Error(\n      `Unrecognized eject method \"${ejectMethod}\". Valid options are: bare, expokit.`\n    );\n  }\n}\n\nfunction ensureDependenciesMap(dependencies: any): DependenciesMap {\n  if (typeof dependencies !== 'object') {\n    throw new Error(`Dependency map is invalid, expected object but got ${typeof dependencies}`);\n  }\n\n  const outputMap: DependenciesMap = {};\n  if (!dependencies) return outputMap;\n\n  for (const key of Object.keys(dependencies)) {\n    const value = dependencies[key];\n    if (typeof value === 'string') {\n      outputMap[key] = value;\n    } else {\n      throw new Error(\n        `Dependency for key \\`${key}\\` should be a \\`string\\`, instead got: \\`{ ${key}: ${JSON.stringify(\n          value\n        )} }\\``\n      );\n    }\n  }\n  return outputMap;\n}\n\nasync function ejectToBareAsync(projectRoot: string): Promise<void> {\n  const useYarn = PackageManager.isUsingYarn(projectRoot);\n  const npmOrYarn = useYarn ? 'yarn' : 'npm';\n  const { configPath, configName } = findConfigFile(projectRoot);\n  const { exp, pkg } = await readConfigJsonAsync(projectRoot);\n\n  const configBuffer = await fse.readFile(configPath);\n  const appJson = configName === 'app.json' ? JSON.parse(configBuffer.toString()) : {};\n\n  /**\n   * Perform validations\n   */\n  if (!exp.sdkVersion) throw new Error(`Couldn't read ${configName}`);\n\n  if (!Versions.gteSdkVersion(exp, '34.0.0')) {\n    throw new Error(`Ejecting to a bare project is only available for SDK 34 and higher`);\n  }\n\n  // Validate that the template exists\n  const sdkMajorVersionNumber = semver.major(exp.sdkVersion);\n  const templateSpec = npmPackageArg(`expo-template-bare-minimum@sdk-${sdkMajorVersionNumber}`);\n  try {\n    await pacote.manifest(templateSpec);\n  } catch (e) {\n    if (e.code === 'E404') {\n      throw new Error(\n        `Unable to eject because an eject template for SDK ${sdkMajorVersionNumber} was not found`\n      );\n    } else {\n      throw e;\n    }\n  }\n\n  /**\n   * Customize app.json\n   */\n  const { displayName, name } = await getAppNamesAsync(projectRoot);\n  appJson.displayName = displayName;\n  appJson.name = name;\n\n  if (appJson.expo.entryPoint && appJson.expo.entryPoint !== EXPO_APP_ENTRY) {\n    log(\n      chalk.yellow(`expo.entryPoint is already configured, we recommend using \"${EXPO_APP_ENTRY}`)\n    );\n  } else {\n    appJson.expo.entryPoint = EXPO_APP_ENTRY;\n  }\n\n  log('Writing app.json...');\n  await fse.writeFile(path.resolve('app.json'), JSON.stringify(appJson, null, 2));\n  log(chalk.green('Wrote to app.json, please update it manually in the future.'));\n\n  // This is validated later...\n  let defaultDependencies: any = {};\n  let defaultDevDependencies: any = {};\n\n  /**\n   * Extract the template and copy it over\n   */\n  try {\n    const tempDir = temporary.directory();\n    await Exp.extractTemplateAppAsync(templateSpec, tempDir, appJson);\n    fse.copySync(path.join(tempDir, 'ios'), path.join(projectRoot, 'ios'));\n    fse.copySync(path.join(tempDir, 'android'), path.join(projectRoot, 'android'));\n    const { dependencies, devDependencies } = JsonFile.read(path.join(tempDir, 'package.json'));\n    defaultDependencies = ensureDependenciesMap(dependencies);\n    defaultDevDependencies = devDependencies;\n    log('Successfully copied template native code.');\n  } catch (e) {\n    log(chalk.red(e.message));\n    log(chalk.red(`Eject failed, see above output for any issues.`));\n    log(chalk.yellow('You may want to delete the `ios` and/or `android` directories.'));\n    process.exit(1);\n  }\n\n  log(`Updating your package.json...`);\n  if (!pkg.scripts) {\n    pkg.scripts = {};\n  }\n  delete pkg.scripts.eject;\n  pkg.scripts.start = 'react-native start';\n  pkg.scripts.ios = 'react-native run-ios';\n  pkg.scripts.android = 'react-native run-android';\n\n  // Jetifier is only needed for SDK 34 & 35\n  if (Versions.lteSdkVersion(exp, '35.0.0')) {\n    if (pkg.scripts.postinstall) {\n      pkg.scripts.postinstall = `jetify && ${pkg.scripts.postinstall}`;\n      log(chalk.bgYellow.black('jetifier has been added to your existing postinstall script.'));\n    } else {\n      pkg.scripts.postinstall = `jetify`;\n    }\n  }\n\n  // The template may have some dependencies beyond react/react-native/react-native-unimodules,\n  // for example RNGH and Reanimated. We should prefer the version that is already being used\n  // in the project for those, but swap the react/react-native/react-native-unimodules versions\n  // with the ones in the template.\n  const combinedDependencies: DependenciesMap = ensureDependenciesMap({\n    ...defaultDependencies,\n    ...pkg.dependencies,\n  });\n\n  for (const dependenciesKey of ['react', 'react-native-unimodules', 'react-native']) {\n    combinedDependencies[dependenciesKey] = defaultDependencies[dependenciesKey];\n  }\n  pkg.dependencies = combinedDependencies;\n\n  const combinedDevDependencies: DependenciesMap = ensureDependenciesMap({\n    ...defaultDevDependencies,\n    ...pkg.devDependencies,\n  });\n\n  // Jetifier is only needed for SDK 34 & 35\n  if (Versions.lteSdkVersion(exp, '35.0.0')) {\n    combinedDevDependencies['jetifier'] = defaultDevDependencies['jetifier'];\n  }\n\n  pkg.devDependencies = combinedDevDependencies;\n  await fse.writeFile(path.resolve('package.json'), JSON.stringify(pkg, null, 2));\n  log(chalk.green('Your package.json is up to date!'));\n\n  log(`Adding entry point...`);\n  if (pkg.main !== EXPO_APP_ENTRY) {\n    log(\n      chalk.yellow(\n        `Removing \"main\": ${pkg.main} from package.json. We recommend using index.js instead.`\n      )\n    );\n  }\n  delete pkg.main;\n  await fse.writeFile(path.resolve('package.json'), JSON.stringify(pkg, null, 2));\n\n  const indexjs = `import { AppRegistry, Platform } from 'react-native';\nimport App from './App';\n\nAppRegistry.registerComponent('${appJson.name}', () => App);\n\nif (Platform.OS === 'web') {\n  const rootTag = document.getElementById('root') || document.getElementById('main');\n  AppRegistry.runApplication('${appJson.name}', { rootTag });\n}\n`;\n  await fse.writeFile(path.resolve('index.js'), indexjs);\n  log(chalk.green('Added new entry points!'));\n\n  log(\n    chalk.grey(\n      `Note that using \\`${npmOrYarn} start\\` will now require you to run Xcode and/or Android Studio to build the native code for your project.`\n    )\n  );\n\n  log('Removing node_modules...');\n  await fse.remove('node_modules');\n\n  log('Installing new packages...');\n  const packageManager = PackageManager.createForProject(projectRoot, { log });\n  await packageManager.installAsync();\n\n  // --Apply app config to iOS and Android projects here--\n  // If the bundleIdentifier exists then set it on the project\n  if (exp.ios?.bundleIdentifier) {\n    IosWorkspace.setBundleIdentifier(projectRoot, exp.ios?.bundleIdentifier);\n  }\n\n  log.newLine();\n}\n\n/**\n * Returns a name that adheres to Xcode and Android naming conventions.\n *\n * - package name: https://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html\n * @param projectRoot\n */\nasync function getAppNamesAsync(\n  projectRoot: string\n): Promise<{ displayName: string; name: string }> {\n  const { configPath, configName } = findConfigFile(projectRoot);\n  const { exp, pkg } = await readConfigJsonAsync(projectRoot);\n\n  const configBuffer = await fse.readFile(configPath);\n  const appJson = configName === 'app.json' ? JSON.parse(configBuffer.toString()) : {};\n\n  let { displayName, name } = appJson;\n  if (!displayName || !name) {\n    log(\"We have a couple of questions to ask you about how you'd like to name your app:\");\n    ({ displayName, name } = await prompt(\n      [\n        {\n          type: 'text',\n          name: 'displayName',\n          message: \"What should your app appear as on a user's home screen?\",\n          initial: name || exp.name,\n          validate({ length }: string): true | ValidationErrorMessage {\n            return length ? true : 'App display name cannot be empty.';\n          },\n        },\n        {\n          type: 'text',\n          name: 'name',\n          message: 'What should your Android Studio and Xcode projects be called?',\n          initial: pkg.name ? stripDashes(pkg.name) : undefined,\n          validate(value: string): true | ValidationErrorMessage {\n            if (value.length === 0) {\n              return 'Project name cannot be empty.';\n            } else if (value.includes('-') || value.includes(' ')) {\n              return 'Project name cannot contain hyphens or spaces.';\n            }\n            return true;\n          },\n        },\n      ],\n      {\n        nonInteractiveHelp: 'Please specify \"displayName\" and \"name\" in app.json.',\n      }\n    ));\n  }\n\n  return { displayName, name };\n}\n\nexport function stripDashes(s: string): string {\n  return s.replace(/\\s|-/g, '');\n}\n"],"file":"LegacyEject.js"}