{"version":3,"sources":["../../../src/commands/fetch/ios.ts"],"names":["fetchIosCertsAsync","projectRoot","inProjectDir","filename","path","resolve","bundleIdentifier","ctx","Context","init","app","accountName","projectOwner","projectName","manifest","slug","appCredentials","ios","getAppCredentials","pushCredentials","getPushKey","distCredentials","getDistCert","certP12","certPassword","certPrivateSigningKey","apnsKeyId","apnsKeyP8","pushP12","pushPassword","provisioningProfile","teamId","credentials","undefined","distPath","fs","writeFile","Buffer","from","distPrivateKeyPath","apnsKeyP8Path","pushPath","provisioningProfilePath","chalk","bold","yellow","e","CommandError"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA,eAAeA,kBAAf,CAAkCC,WAAlC,EAAsE;AACpE,QAAMC,YAAY,GAAIC,QAAD,IAA8BC,IAAI,GAACC,OAAL,CAAaJ,WAAb,EAA0BE,QAA1B,CAAnD;;AAEA,QAAMG,gBAAgB,GAAG,MAAM,wDAA+BL,WAA/B,CAA/B;;AAEA,MAAI;AAAA;;AACF,UAAMM,GAAG,GAAG,KAAIC,kBAAJ,GAAZ;AACA,UAAMD,GAAG,CAACE,IAAJ,CAASR,WAAT,CAAN;AAEA,UAAMS,GAAG,GAAG;AACVC,MAAAA,WAAW,EAAEJ,GAAG,CAACK,YADP;AAEVC,MAAAA,WAAW,EAAEN,GAAG,CAACO,QAAJ,CAAaC,IAFhB;AAGVT,MAAAA;AAHU,KAAZ;AAKA,wBACG,mCAAkCI,GAAG,CAACC,WAAY,IAAGD,GAAG,CAACG,WAAY,KAAIP,gBAAiB,GAD7F;AAGA,UAAMU,cAAc,GAAG,MAAMT,GAAG,CAACU,GAAJ,CAAQC,iBAAR,CAA0BR,GAA1B,CAA7B;AACA,UAAMS,eAAe,GAAG,MAAMZ,GAAG,CAACU,GAAJ,CAAQG,UAAR,CAAmBV,GAAnB,CAA9B;AACA,UAAMW,eAAe,GAAG,MAAMd,GAAG,CAACU,GAAJ,CAAQK,WAAR,CAAoBZ,GAApB,CAA9B;AAEA,UAAM;AAAEa,MAAAA,OAAF;AAAWC,MAAAA,YAAX;AAAyBC,MAAAA;AAAzB,QAAmDJ,eAAnD,aAAmDA,eAAnD,cAAmDA,eAAnD,GAAsE,EAA5E;AACA,UAAM;AAAEK,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA2BR,eAA3B,aAA2BA,eAA3B,cAA2BA,eAA3B,GAA8C,EAApD;AACA,UAAM;AAAES,MAAAA,OAAF;AAAWC,MAAAA,YAAX;AAAyBC,MAAAA,mBAAzB;AAA8CC,MAAAA;AAA9C,iCACJf,cADI,aACJA,cADI,uBACJA,cAAc,CAAEgB,WADZ,yEAC2B,EADjC;;AAGA,QAAID,MAAM,KAAKE,SAAf,EAA0B;AACxB,0BAAK,wDAAuDF,MAAO,EAAnE;AACD;;AACD,QAAIR,OAAJ,EAAa;AACX,YAAMW,QAAQ,GAAGhC,YAAY,CAAE,GAAEQ,GAAG,CAACG,WAAY,WAApB,CAA7B;AACA,YAAMsB,EAAE,GAACC,SAAH,CAAaF,QAAb,EAAuBG,MAAM,CAACC,IAAP,CAAYf,OAAZ,EAAqB,QAArB,CAAvB,CAAN;AACD;;AACD,QAAIE,qBAAJ,EAA2B;AACzB,YAAMc,kBAAkB,GAAGrC,YAAY,CAAE,GAAEQ,GAAG,CAACG,WAAY,wBAApB,CAAvC;AACA,YAAMsB,EAAE,GAACC,SAAH,CAAaG,kBAAb,EAAiCd,qBAAjC,CAAN;AACD;;AACD,QAAIF,OAAO,IAAIE,qBAAf,EAAsC;AACpC,0BAAI,8CAAJ;AACD;;AACD,QAAIE,SAAJ,EAAe;AACb,YAAMa,aAAa,GAAGtC,YAAY,CAAE,GAAEQ,GAAG,CAACG,WAAY,cAApB,CAAlC;AACA,YAAMsB,EAAE,GAACC,SAAH,CAAaI,aAAb,EAA4Bb,SAA5B,CAAN;AACA,0BAAI,qCAAJ;AACD;;AACD,QAAIC,OAAJ,EAAa;AACX,YAAMa,QAAQ,GAAGvC,YAAY,CAAE,GAAEQ,GAAG,CAACG,WAAY,WAApB,CAA7B;AACA,YAAMsB,EAAE,GAACC,SAAH,CAAaK,QAAb,EAAuBJ,MAAM,CAACC,IAAP,CAAYV,OAAZ,EAAqB,QAArB,CAAvB,CAAN;AACD;;AACD,QAAIA,OAAJ,EAAa;AACX,0BAAI,sCAAJ;AACD;;AACD,QAAIE,mBAAJ,EAAyB;AACvB,YAAMY,uBAAuB,GAAGtC,IAAI,GAACC,OAAL,CAC9BJ,WAD8B,EAE7B,GAAES,GAAG,CAACG,WAAY,kBAFW,CAAhC;AAIA,YAAMsB,EAAE,GAACC,SAAH,CAAaM,uBAAb,EAAsCL,MAAM,CAACC,IAAP,CAAYR,mBAAZ,EAAiC,QAAjC,CAAtC,CAAN;AACA,0BAAI,oCAAJ;AACD;;AACD,wBAAK;;6BAGHN,YAAY,GAAGmB,iBAAMC,IAAN,CAAWpB,YAAX,CAAH,GAA8BmB,iBAAME,MAAN,CAAa,iBAAb,CAC3C;6BACwBnB,SAAS,GAAGiB,iBAAMC,IAAN,CAAWlB,SAAX,CAAH,GAA2BiB,iBAAME,MAAN,CAAa,iBAAb,CAAgC;6BAE3FhB,YAAY,GAAGc,iBAAMC,IAAN,CAAWf,YAAX,CAAH,GAA8Bc,iBAAME,MAAN,CAAa,iBAAb,CAC3C;CARD;AAUD,GAjED,CAiEE,OAAOC,CAAP,EAAU;AACV,UAAM,KAAIC,uBAAJ,EACJ,wEADI,CAAN;AAGD;;AAED,sBAAI,WAAJ;AACD;;eAEc/C,kB","sourcesContent":["import chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\n\nimport CommandError from '../../CommandError';\nimport { Context } from '../../credentials/context';\nimport log from '../../log';\nimport { getOrPromptForBundleIdentifier } from '../eject/ConfigValidation';\n\nasync function fetchIosCertsAsync(projectRoot: string): Promise<void> {\n  const inProjectDir = (filename: string): string => path.resolve(projectRoot, filename);\n\n  const bundleIdentifier = await getOrPromptForBundleIdentifier(projectRoot);\n\n  try {\n    const ctx = new Context();\n    await ctx.init(projectRoot);\n\n    const app = {\n      accountName: ctx.projectOwner,\n      projectName: ctx.manifest.slug,\n      bundleIdentifier,\n    };\n    log(\n      `Retrieving iOS credentials for @${app.accountName}/${app.projectName} (${bundleIdentifier})`\n    );\n    const appCredentials = await ctx.ios.getAppCredentials(app);\n    const pushCredentials = await ctx.ios.getPushKey(app);\n    const distCredentials = await ctx.ios.getDistCert(app);\n\n    const { certP12, certPassword, certPrivateSigningKey } = distCredentials ?? {};\n    const { apnsKeyId, apnsKeyP8 } = pushCredentials ?? {};\n    const { pushP12, pushPassword, provisioningProfile, teamId } =\n      appCredentials?.credentials ?? {};\n\n    if (teamId !== undefined) {\n      log(`These credentials are associated with Apple Team ID: ${teamId}`);\n    }\n    if (certP12) {\n      const distPath = inProjectDir(`${app.projectName}_dist.p12`);\n      await fs.writeFile(distPath, Buffer.from(certP12, 'base64'));\n    }\n    if (certPrivateSigningKey) {\n      const distPrivateKeyPath = inProjectDir(`${app.projectName}_dist_cert_private.key`);\n      await fs.writeFile(distPrivateKeyPath, certPrivateSigningKey);\n    }\n    if (certP12 || certPrivateSigningKey) {\n      log('Wrote distribution cert credentials to disk.');\n    }\n    if (apnsKeyP8) {\n      const apnsKeyP8Path = inProjectDir(`${app.projectName}_apns_key.p8`);\n      await fs.writeFile(apnsKeyP8Path, apnsKeyP8);\n      log('Wrote push key credentials to disk.');\n    }\n    if (pushP12) {\n      const pushPath = inProjectDir(`${app.projectName}_push.p12`);\n      await fs.writeFile(pushPath, Buffer.from(pushP12, 'base64'));\n    }\n    if (pushP12) {\n      log('Wrote push cert credentials to disk.');\n    }\n    if (provisioningProfile) {\n      const provisioningProfilePath = path.resolve(\n        projectRoot,\n        `${app.projectName}.mobileprovision`\n      );\n      await fs.writeFile(provisioningProfilePath, Buffer.from(provisioningProfile, 'base64'));\n      log('Wrote provisioning profile to disk');\n    }\n    log(`Save these important values as well:\n\nDistribution P12 password: ${\n      certPassword ? chalk.bold(certPassword) : chalk.yellow('(not available)')\n    }\nPush Key ID:               ${apnsKeyId ? chalk.bold(apnsKeyId) : chalk.yellow('(not available)')}\nPush P12 password:         ${\n      pushPassword ? chalk.bold(pushPassword) : chalk.yellow('(not available)')\n    }\n`);\n  } catch (e) {\n    throw new CommandError(\n      'Unable to fetch credentials for this project. Are you sure they exist?'\n    );\n  }\n\n  log('All done!');\n}\n\nexport default fetchIosCertsAsync;\n"],"file":"ios.js"}