{"version":3,"sources":["../../src/credentials/context.ts"],"names":["Context","nonInteractive","_nonInteractive","user","_user","hasProjectContext","_hasProjectContext","projectDir","_projectDir","projectOwner","manifest","_manifest","Error","api","_apiClient","android","_androidApiClient","ios","_iosApiClient","appleCtx","_appleCtx","value","hasAppleCtx","ensureAppleCtx","_appleCtxOptions","logOwnerAndProject","isProxyUser","owner","username","slug","init","options","UserManager","getCurrentUserAsync","undefined","allowAnonymous","ensureLoggedInAsync","ApiV2","clientForUser","IosApi","AndroidApi","exp","skipSDKVersionRequirement","error"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { ApiV2, RobotUser, User, UserManager } from '@expo/xdl';\nimport pick from 'lodash/pick';\n\nimport { AppleCtx, authenticate } from '../appleApi';\nimport log from '../log';\nimport { getProjectOwner } from '../projects';\nimport AndroidApi from './api/AndroidApi';\nimport IosApi from './api/IosApi';\n\nexport interface IView {\n  open(ctx: Context): Promise<IView | null>;\n}\n\ninterface AppleCtxOptions {\n  appleId?: string;\n  appleIdPassword?: string;\n  teamId?: string;\n}\n\ninterface CtxOptions extends AppleCtxOptions {\n  allowAnonymous?: boolean;\n  nonInteractive?: boolean;\n}\n\nexport class Context {\n  _hasProjectContext: boolean = false;\n  _projectDir?: string;\n  _user?: User | RobotUser;\n  _manifest?: ExpoConfig;\n  _apiClient?: ApiV2;\n  _iosApiClient?: IosApi;\n  _androidApiClient?: AndroidApi;\n  _appleCtxOptions?: AppleCtxOptions;\n  _appleCtx?: AppleCtx;\n  _nonInteractive?: boolean;\n\n  get nonInteractive(): boolean {\n    return this._nonInteractive === true;\n  }\n\n  get user(): User | RobotUser {\n    return this._user as User | RobotUser;\n  }\n  get hasProjectContext(): boolean {\n    return this._hasProjectContext;\n  }\n  get projectDir(): string {\n    return this._projectDir as string;\n  }\n  get projectOwner(): string {\n    return getProjectOwner(this.user, this.manifest);\n  }\n  get manifest(): ExpoConfig {\n    if (!this._manifest) {\n      throw new Error('Manifest (app.json) not initialized.');\n    }\n    return this._manifest;\n  }\n  get api(): ApiV2 {\n    return this._apiClient as ApiV2;\n  }\n  get android(): AndroidApi {\n    return this._androidApiClient as AndroidApi;\n  }\n  get ios(): IosApi {\n    return this._iosApiClient as IosApi;\n  }\n  get appleCtx(): AppleCtx {\n    if (!this._appleCtx) {\n      throw new Error('Apple context not initialized.');\n    }\n    return this._appleCtx;\n  }\n  set manifest(value: ExpoConfig) {\n    this._manifest = value;\n  }\n\n  hasAppleCtx(): boolean {\n    return !!this._appleCtx;\n  }\n\n  async ensureAppleCtx() {\n    if (!this._appleCtx) {\n      this._appleCtx = await authenticate(this._appleCtxOptions);\n    }\n  }\n\n  logOwnerAndProject() {\n    // Figure out if User A is configuring credentials as admin for User B's project\n    const isProxyUser = this.manifest.owner && this.manifest.owner !== this.user.username;\n    log(\n      `Accessing credentials ${isProxyUser ? 'on behalf of' : 'for'} ${\n        this.projectOwner\n      } in project ${this.manifest.slug}`\n    );\n  }\n\n  async init(projectDir: string, options: CtxOptions = {}) {\n    this._user = (await UserManager.getCurrentUserAsync()) || undefined;\n\n    // User isn't signed it, but needs to be signed in\n    if (!this._user && !options.allowAnonymous) {\n      this._user = (await UserManager.ensureLoggedInAsync()) as User;\n    }\n\n    this._projectDir = projectDir;\n    this._apiClient = ApiV2.clientForUser(this.user);\n    this._iosApiClient = new IosApi(this.api);\n    this._androidApiClient = new AndroidApi(this.api);\n    this._appleCtxOptions = pick(options, ['appleId', 'appleIdPassword', 'teamId']);\n    this._nonInteractive = options.nonInteractive;\n\n    // try to acccess project context\n    try {\n      const { exp } = getConfig(projectDir, { skipSDKVersionRequirement: true });\n      this._manifest = exp;\n      this._hasProjectContext = true;\n      this.logOwnerAndProject();\n    } catch (error) {\n      // ignore error\n      // startcredentials manager without project context\n    }\n  }\n}\n"],"file":"context.js"}