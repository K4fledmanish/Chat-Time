{"version":3,"sources":["../src/schemes.ts"],"names":["getSchemesForIosAsync","projectRoot","configPath","IOSConfig","Paths","getInfoPlistPath","rawPlist","fs","readFileSync","plistObject","plist","parse","Scheme","getSchemesFromPlist","getSchemesForAndroidAsync","AndroidConfig","getAndroidManifestAsync","manifest","Manifest","readAndroidManifestAsync","getSchemesFromManifest","intersecting","a","b","c","d","length","filter","value","includes","getDevClientSchemeAsync","ios","android","Promise","all","matching","log","warn","chalk","cyan","dim","AbortCommandError"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA,eAAeA,qBAAf,CAAqCC,WAArC,EAA0D;AACxD,MAAI;AACF,UAAMC,UAAU,GAAGC,2BAAUC,KAAV,CAAgBC,gBAAhB,CAAiCJ,WAAjC,CAAnB;;AACA,UAAMK,QAAQ,GAAGC,EAAE,GAACC,YAAH,CAAgBN,UAAhB,EAA4B,MAA5B,CAAjB;;AACA,UAAMO,WAAW,GAAGC,iBAAMC,KAAN,CAAYL,QAAZ,CAApB;;AACA,WAAOH,2BAAUS,MAAV,CAAiBC,mBAAjB,CAAqCJ,WAArC,CAAP;AACD,GALD,CAKE,gBAAM;AACN;AACA,WAAO,EAAP;AACD;AACF;;AAED,eAAeK,yBAAf,CAAyCb,WAAzC,EAA8D;AAC5D,MAAI;AACF,UAAMC,UAAU,GAAG,MAAMa,+BAAcX,KAAd,CAAoBY,uBAApB,CAA4Cf,WAA5C,CAAzB;AACA,UAAMgB,QAAQ,GAAG,MAAMF,+BAAcG,QAAd,CAAuBC,wBAAvB,CAAgDjB,UAAhD,CAAvB;AACA,WAAO,MAAMa,+BAAcH,MAAd,CAAqBQ,sBAArB,CAA4CH,QAA5C,CAAb;AACD,GAJD,CAIE,iBAAM;AACN;AACA,WAAO,EAAP;AACD;AACF;;AAED,SAASI,YAAT,CAAyBC,CAAzB,EAAiCC,CAAjC,EAA8C;AAC5C,QAAM,CAACC,CAAD,EAAIC,CAAJ,IAASH,CAAC,CAACI,MAAF,GAAWH,CAAC,CAACG,MAAb,GAAsB,CAACJ,CAAD,EAAIC,CAAJ,CAAtB,GAA+B,CAACA,CAAD,EAAID,CAAJ,CAA9C;AACA,SAAOE,CAAC,CAACG,MAAF,CAASC,KAAK,IAAIH,CAAC,CAACI,QAAF,CAAWD,KAAX,CAAlB,CAAP;AACD;;AAEM,eAAeE,uBAAf,CAAuC7B,WAAvC,EAA6E;AAClF,QAAM,CAAC8B,GAAD,EAAMC,OAAN,IAAiB,MAAMC,OAAO,CAACC,GAAR,CAAY,CACvClC,qBAAqB,CAACC,WAAD,CADkB,EAEvCa,yBAAyB,CAACb,WAAD,CAFc,CAAZ,CAA7B;AAKA,QAAM,CAACkC,QAAD,IAAad,YAAY,CAACU,GAAD,EAAMC,OAAN,CAA/B;;AACA,MAAI,CAACG,QAAL,EAAe;AACbC,mBAAIC,IAAJ,CACE,wIADF;;AAGA,wBACG,4BAA2BD,eAAIE,KAAJ,CAAUC,IAAV,CAC1B,8BAD0B,CAE1B,iCAAgCH,eAAIE,KAAJ,CAAUC,IAAV,CAAe,UAAf,CAA2B,SAH/D;AAKA,wBACEH,eAAIE,KAAJ,CAAUE,GAAV,CACG,+EAA8EJ,eAAIE,KAAJ,CAAUC,IAAV,CAC7E,qBAD6E,CAE7E,IAHJ,CADF,EATa,CAiBb;;AACA,UAAM,KAAIE,iCAAJ,GAAN;AACD;;AACD,SAAON,QAAP;AACD","sourcesContent":["import { AndroidConfig, IOSConfig } from '@expo/config-plugins';\nimport plist from '@expo/plist';\nimport * as fs from 'fs-extra';\n\nimport { AbortCommandError } from './CommandError';\nimport log from './log';\n\nasync function getSchemesForIosAsync(projectRoot: string) {\n  try {\n    const configPath = IOSConfig.Paths.getInfoPlistPath(projectRoot);\n    const rawPlist = fs.readFileSync(configPath, 'utf8');\n    const plistObject = plist.parse(rawPlist);\n    return IOSConfig.Scheme.getSchemesFromPlist(plistObject);\n  } catch {\n    // No ios folder or some other error\n    return [];\n  }\n}\n\nasync function getSchemesForAndroidAsync(projectRoot: string) {\n  try {\n    const configPath = await AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n    const manifest = await AndroidConfig.Manifest.readAndroidManifestAsync(configPath);\n    return await AndroidConfig.Scheme.getSchemesFromManifest(manifest);\n  } catch {\n    // No android folder or some other error\n    return [];\n  }\n}\n\nfunction intersecting<T>(a: T[], b: T[]): T[] {\n  const [c, d] = a.length > b.length ? [a, b] : [b, a];\n  return c.filter(value => d.includes(value));\n}\n\nexport async function getDevClientSchemeAsync(projectRoot: string): Promise<string> {\n  const [ios, android] = await Promise.all([\n    getSchemesForIosAsync(projectRoot),\n    getSchemesForAndroidAsync(projectRoot),\n  ]);\n\n  const [matching] = intersecting(ios, android);\n  if (!matching) {\n    log.warn(\n      '\\nDev Client: No common URI schemes could be found for the native ios and android projects, this is required for opening the project\\n'\n    );\n    log(\n      `Add a common scheme with ${log.chalk.cyan(\n        'npx uri-scheme add my-scheme'\n      )} or provide a scheme with the ${log.chalk.cyan('--scheme')} flag\\n`\n    );\n    log(\n      log.chalk.dim(\n        `You can see all of the existing schemes for your native projects by running ${log.chalk.cyan(\n          'npx uri-scheme list'\n        )}\\n`\n      )\n    );\n\n    // No log error\n    throw new AbortCommandError();\n  }\n  return matching;\n}\n"],"file":"schemes.js"}