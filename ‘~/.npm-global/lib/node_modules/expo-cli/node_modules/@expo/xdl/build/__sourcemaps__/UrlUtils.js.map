{"version":3,"sources":["UrlUtils.ts"],"names":["constructBundleUrlAsync","projectRoot","opts","requestHostname","constructUrlAsync","constructManifestUrlAsync","constructHostUriAsync","urlString","urlObj","url","parse","protocol","slashes","format","constructLogUrlAsync","baseUrl","urlType","constructUrlWithExtensionAsync","entryPoint","ext","metroQueryOptions","defaultOpts","dev","minify","bundleUrl","hostType","mainModulePath","guessMainModulePath","queryParams","constructBundleQueryParams","constructPublishUrlAsync","constructSourceMapUrlAsync","constructAssetsUrlAsync","constructDebuggerHostAsync","exp","constructBundleQueryParamsWithConfig","hot","strict","Versions","gteSdkVersion","QueryString","stringify","supportsAssetPlugins","usesAssetPluginsQueryParam","lteSdkVersion","pluginModule","assetPlugin","encodeURIComponent","includeAssetFileHashes","constructWebAppUrlAsync","options","packagerInfo","ProjectSettings","readPackagerInfoAsync","webpackServerPort","https","readAsync","host","ip","address","assertValidOptions","schema","joi","object","keys","scheme","string","optional","allow","any","valid","lanType","boolean","urlRandomness","error","validate","XDLError","toString","ensureOptionsAsync","getPackagerOptsAsync","optionsWithDefaults","resolveProtocol","detach","sdkVersion","schemes","Array","isArray","filter","firstScheme","incomingOpts","isPackager","hostname","port","proxyURL","process","env","EXPO_PACKAGER_PROXY_URL","EXPO_MANIFEST_PROXY_URL","parsedProxyURL","packagerPort","expoServerPort","Config","offline","EXPO_PACKAGER_HOSTNAME","trim","REACT_NATIVE_PACKAGER_HOSTNAME","os","ngrokUrl","packagerNgrokUrl","expoServerNgrokUrl","ProjectUtils","logWarning","clearNotification","pnu","url_","joinURLComponents","createRedirectURL","validPort","validProtocol","replace","randomIdentifier","length","alphabet","result","i","j","Math","floor","random","c","substr","sevenDigitIdentifier","randomIdentifierForUser","username","someRandomness","join","domainify","s","toLowerCase","isHttps","validator","isURL","protocols"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig, resolveModule } from '@expo/config';\nimport joi from '@hapi/joi';\nimport assert from 'assert';\nimport os from 'os';\nimport QueryString from 'querystring';\nimport url from 'url';\nimport validator from 'validator';\n\nimport Config from './Config';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as Versions from './Versions';\nimport XDLError from './XDLError';\nimport ip from './ip';\nimport * as ProjectUtils from './project/ProjectUtils';\n\ninterface URLOptions extends Omit<ProjectSettings.ProjectSettings, 'urlRandomness'> {\n  urlType: null | 'exp' | 'http' | 'no-protocol' | 'redirect';\n}\n\ninterface MetroQueryOptions {\n  dev?: boolean;\n  strict?: boolean;\n  minify?: boolean;\n}\n\nexport async function constructBundleUrlAsync(\n  projectRoot: string,\n  opts: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  return await constructUrlAsync(projectRoot, opts, true, requestHostname);\n}\n\nexport async function constructManifestUrlAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  return await constructUrlAsync(projectRoot, opts ?? null, false, requestHostname);\n}\n\n// gets the base manifest URL and removes the scheme\nexport async function constructHostUriAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  const urlString = await constructUrlAsync(projectRoot, null, false, requestHostname);\n  // we need to use node's legacy urlObject api since the newer one doesn't like empty protocols\n  const urlObj = url.parse(urlString);\n  urlObj.protocol = '';\n  urlObj.slashes = false;\n  return url.format(urlObj);\n}\n\nexport async function constructLogUrlAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  const baseUrl = await constructUrlAsync(projectRoot, { urlType: 'http' }, false, requestHostname);\n  return `${baseUrl}/logs`;\n}\n\nexport async function constructUrlWithExtensionAsync(\n  projectRoot: string,\n  entryPoint: string,\n  ext: string,\n  requestHostname?: string,\n  metroQueryOptions?: MetroQueryOptions\n) {\n  const defaultOpts = {\n    dev: false,\n    minify: true,\n  };\n  metroQueryOptions = metroQueryOptions || defaultOpts;\n  let bundleUrl = await constructBundleUrlAsync(\n    projectRoot,\n    {\n      hostType: 'localhost',\n      urlType: 'http',\n    },\n    requestHostname\n  );\n\n  const mainModulePath = guessMainModulePath(entryPoint);\n  bundleUrl += `/${mainModulePath}.${ext}`;\n\n  const queryParams = constructBundleQueryParams(projectRoot, metroQueryOptions);\n  return `${bundleUrl}?${queryParams}`;\n}\n\nexport async function constructPublishUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string,\n  metroQueryOptions?: MetroQueryOptions\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(\n    projectRoot,\n    entryPoint,\n    'bundle',\n    requestHostname,\n    metroQueryOptions\n  );\n}\n\nexport async function constructSourceMapUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'map', requestHostname);\n}\n\nexport async function constructAssetsUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'assets', requestHostname);\n}\n\nexport async function constructDebuggerHostAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlAsync(\n    projectRoot,\n    {\n      urlType: 'no-protocol',\n    },\n    true,\n    requestHostname\n  );\n}\n\nexport function constructBundleQueryParams(projectRoot: string, opts: MetroQueryOptions): string {\n  const { exp } = getConfig(projectRoot);\n  return constructBundleQueryParamsWithConfig(projectRoot, opts, exp);\n}\n\nexport function constructBundleQueryParamsWithConfig(\n  projectRoot: string,\n  opts: MetroQueryOptions,\n  exp: Pick<ExpoConfig, 'sdkVersion' | 'nodeModulesPath'>\n): string {\n  const queryParams: Record<string, boolean | string> = {\n    dev: !!opts.dev,\n    hot: false,\n  };\n\n  if ('strict' in opts) {\n    queryParams.strict = !!opts.strict;\n  }\n\n  if ('minify' in opts) {\n    // TODO: Maybe default this to true if dev is false\n    queryParams.minify = !!opts.minify;\n  }\n\n  // No special requirements after SDK 33 (Jun 5 2019)\n  if (Versions.gteSdkVersion(exp, '33.0.0')) {\n    return QueryString.stringify(queryParams);\n  }\n\n  // TODO: Remove this ...\n\n  // SDK11 to SDK32 require us to inject hashAssetFiles through the params, but this is not\n  // needed with SDK33+\n  const supportsAssetPlugins = Versions.gteSdkVersion(exp, '11.0.0');\n  const usesAssetPluginsQueryParam = supportsAssetPlugins && Versions.lteSdkVersion(exp, '32.0.0');\n  if (usesAssetPluginsQueryParam) {\n    // Use an absolute path here so that we can not worry about symlinks/relative requires\n    const pluginModule = resolveModule('expo/tools/hashAssetFiles', projectRoot, exp);\n    queryParams.assetPlugin = encodeURIComponent(pluginModule);\n  } else if (!supportsAssetPlugins) {\n    // Only sdk-10.1.0+ supports the assetPlugin parameter. We use only the\n    // major version in the sdkVersion field, so check for 11.0.0 to be sure.\n    queryParams.includeAssetFileHashes = true;\n  }\n\n  return QueryString.stringify(queryParams);\n}\n\nexport async function constructWebAppUrlAsync(\n  projectRoot: string,\n  options: { hostType?: 'localhost' | 'lan' | 'tunnel' } = {}\n): Promise<string | null> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.webpackServerPort) {\n    return null;\n  }\n\n  const { https, hostType } = await ProjectSettings.readAsync(projectRoot);\n  const host = (options.hostType ?? hostType) === 'localhost' ? 'localhost' : ip.address();\n\n  let urlType = 'http';\n  if (https === true) {\n    urlType = 'https';\n  }\n\n  return `${urlType}://${host}:${packagerInfo.webpackServerPort}`;\n}\n\nfunction assertValidOptions(opts: Partial<URLOptions>): URLOptions {\n  const schema = joi.object().keys({\n    scheme: joi.string().optional().allow(null),\n    // Replaced by `scheme`\n    urlType: joi.any().valid('exp', 'http', 'redirect', 'no-protocol'),\n    lanType: joi.any().valid('ip', 'hostname'),\n    hostType: joi.any().valid('localhost', 'lan', 'tunnel'),\n    dev: joi.boolean(),\n    strict: joi.boolean(),\n    minify: joi.boolean(),\n    https: joi.boolean().optional(),\n    urlRandomness: joi.string().optional().allow(null),\n  });\n\n  const { error } = schema.validate(opts);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n  return opts as URLOptions;\n}\n\nasync function ensureOptionsAsync(\n  projectRoot: string,\n  opts: Partial<URLOptions> | null\n): Promise<URLOptions> {\n  if (opts) {\n    assertValidOptions(opts);\n  }\n\n  const defaultOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n  if (!opts) {\n    return { urlType: null, ...defaultOpts };\n  }\n  const optionsWithDefaults = { ...defaultOpts, ...opts };\n  return assertValidOptions(optionsWithDefaults);\n}\n\nfunction resolveProtocol(\n  projectRoot: string,\n  { urlType, ...options }: Pick<URLOptions, 'urlType' | 'scheme'>\n): string | null {\n  if (options.scheme) {\n    return options.scheme;\n  }\n  if (urlType === 'http') {\n    return 'http';\n  } else if (urlType === 'no-protocol') {\n    return null;\n  }\n  let protocol = 'exp';\n\n  const { exp } = getConfig(projectRoot);\n\n  // We only use these values from the config\n  const { scheme, detach, sdkVersion } = exp;\n\n  if (detach) {\n    // Normalize schemes and filter invalid schemes.\n    const schemes = (Array.isArray(scheme) ? scheme : [scheme]).filter(\n      (scheme: any) => typeof scheme === 'string' && !!scheme\n    );\n    // Get the first valid scheme.\n    const firstScheme = schemes[0];\n    if (firstScheme && Versions.gteSdkVersion({ sdkVersion }, '27.0.0')) {\n      protocol = firstScheme;\n    } else if (detach.scheme) {\n      // must keep this fallback in place for older projects\n      // and those detached with an older version of xdl\n      protocol = detach.scheme;\n    }\n  }\n\n  return protocol;\n}\n\nexport async function constructUrlAsync(\n  projectRoot: string,\n  incomingOpts: Partial<URLOptions> | null,\n  isPackager: boolean,\n  requestHostname?: string\n): Promise<string> {\n  const opts = await ensureOptionsAsync(projectRoot, incomingOpts);\n\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n\n  let protocol = resolveProtocol(projectRoot, opts);\n\n  let hostname;\n  let port;\n\n  const proxyURL = isPackager\n    ? process.env.EXPO_PACKAGER_PROXY_URL\n    : process.env.EXPO_MANIFEST_PROXY_URL;\n  if (proxyURL) {\n    const parsedProxyURL = url.parse(proxyURL);\n    hostname = parsedProxyURL.hostname;\n    port = parsedProxyURL.port;\n    if (parsedProxyURL.protocol === 'https:') {\n      if (protocol === 'http') {\n        protocol = 'https';\n      }\n      if (!port) {\n        port = '443';\n      }\n    }\n  } else if (opts.hostType === 'localhost' || requestHostname === 'localhost') {\n    hostname = '127.0.0.1';\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else if (opts.hostType === 'lan' || Config.offline) {\n    if (process.env.EXPO_PACKAGER_HOSTNAME) {\n      hostname = process.env.EXPO_PACKAGER_HOSTNAME.trim();\n    } else if (process.env.REACT_NATIVE_PACKAGER_HOSTNAME) {\n      hostname = process.env.REACT_NATIVE_PACKAGER_HOSTNAME.trim();\n    } else if (opts.lanType === 'ip') {\n      if (requestHostname) {\n        hostname = requestHostname;\n      } else {\n        hostname = ip.address();\n      }\n    } else {\n      // Some old versions of OSX work with hostname but not local ip address.\n      hostname = os.hostname();\n    }\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else {\n    const ngrokUrl = isPackager ? packagerInfo.packagerNgrokUrl : packagerInfo.expoServerNgrokUrl;\n    if (!ngrokUrl || typeof ngrokUrl !== 'string') {\n      // TODO: if you start with --tunnel flag then this warning will always\n      // show up right before the tunnel starts...\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        'Tunnel URL not found (it might not be ready yet), falling back to LAN URL.',\n        'tunnel-url-not-found'\n      );\n      return constructUrlAsync(\n        projectRoot,\n        { ...opts, hostType: 'lan' },\n        isPackager,\n        requestHostname\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'tunnel-url-not-found');\n      const pnu = url.parse(ngrokUrl);\n      hostname = pnu.hostname;\n      port = pnu.port;\n    }\n  }\n\n  const url_ = joinURLComponents({ protocol, hostname, port });\n\n  if (opts.urlType === 'redirect') {\n    return createRedirectURL(url_);\n  }\n\n  return url_;\n}\n\nfunction createRedirectURL(url: string): string {\n  return `https://exp.host/--/to-exp/${encodeURIComponent(url)}`;\n}\n\nfunction joinURLComponents({\n  protocol,\n  hostname,\n  port,\n}: {\n  protocol?: string | null;\n  hostname?: string | null;\n  port?: string | number | null;\n}): string {\n  assert(hostname, 'hostname cannot be inferred.');\n  // Android HMR breaks without this port 80\n  const validPort = port ?? '80';\n  const validProtocol = protocol ? `${protocol}://` : '';\n\n  return `${validProtocol}${hostname}:${validPort}`;\n}\n\nexport function guessMainModulePath(entryPoint: string): string {\n  return entryPoint.replace(/\\.js$/, '');\n}\n\nexport function randomIdentifier(length: number = 6): string {\n  const alphabet = '23456789qwertyuipasdfghjkzxcvbnm';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    const j = Math.floor(Math.random() * alphabet.length);\n    const c = alphabet.substr(j, 1);\n    result += c;\n  }\n  return result;\n}\n\nexport function sevenDigitIdentifier(): string {\n  return `${randomIdentifier(3)}-${randomIdentifier(4)}`;\n}\n\nexport function randomIdentifierForUser(username: string): string {\n  return `${username}-${randomIdentifier(3)}-${randomIdentifier(2)}`;\n}\n\nexport function someRandomness(): string {\n  return [randomIdentifier(2), randomIdentifier(3)].join('-');\n}\n\nexport function domainify(s: string): string {\n  return s\n    .toLowerCase()\n    .replace(/[^a-z0-9-]/g, '-')\n    .replace(/^-+/, '')\n    .replace(/-+$/, '');\n}\n\nexport function isHttps(url: string): boolean {\n  return validator.isURL(url, { protocols: ['https'] });\n}\n"],"file":"../UrlUtils.js","sourceRoot":"/@expo/xdl@59.0.13/src"}