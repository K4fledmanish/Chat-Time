{"version":3,"sources":["project/ngrok.ts"],"names":["ngrokConnectAsync","ngrok","connect","ngrokKillAsync","kill","getNgrokConfigPath","path","join","UserSettings","dotExpoHomeDirectory","connectToNgrokAsync","projectRoot","args","hostnameAsync","ngrokPid","attempts","configPath","hostname","url","e","message","XDLError","toString","JSON","stringify","error_code","process","Logger","logDebug","Exp","resetProjectRandomnessAsync","TUNNEL_TIMEOUT","startTunnelsAsync","username","UserManager","getCurrentUsernameAsync","ANONYMOUS_USERNAME","packagerInfo","ProjectSettings","readPackagerInfoAsync","packagerPort","expoServerPort","stopTunnelsAsync","Android","startAdbReverseAsync","logInfo","packageShortName","parse","base","expRc","startedTunnelsSuccessfully","Promise","race","Error","expoServerNgrokUrl","authtoken","Config","authToken","port","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","UrlUtils","domainify","domain","packagerNgrokUrl","setPackagerInfoAsync","pid","logWithLevel","tag","_expoEventType","addListener","status","logError","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA,MAAMA,iBAAiB,GAAG,uBAAUC,iBAAMC,OAAhB,CAA1B;AAEA,MAAMC,cAAc,GAAG,uBAAUF,iBAAMG,IAAhB,CAAvB;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAOC,IAAI,GAACC,IAAL,CAAUC,wBAAaC,oBAAb,EAAV,EAA+C,WAA/C,CAAP;AACD;;AAED,eAAeC,mBAAf,CACEC,WADF,EAEEC,IAFF,EAGEC,aAHF,EAIEC,QAJF,EAKEC,QAAgB,GAAG,CALrB,EAMmB;AACjB,MAAI;AACF,UAAMC,UAAU,GAAGX,kBAAkB,EAArC;AACA,UAAMY,QAAQ,GAAG,MAAMJ,aAAa,EAApC;AACA,UAAMK,GAAG,GAAG,MAAMlB,iBAAiB,CAAC;AAClCiB,MAAAA,QADkC;AAElCD,MAAAA,UAFkC;AAGlC,SAAGJ;AAH+B,KAAD,CAAnC;AAKA,WAAOM,GAAP;AACD,GATD,CASE,OAAOC,CAAP,EAAU;AACV;AACA,QAAIJ,QAAQ,IAAI,CAAhB,EAAmB;AACjB,UAAII,CAAC,CAACC,OAAN,EAAe;AACb,cAAM,KAAIC,mBAAJ,EAAa,aAAb,EAA4BF,CAAC,CAACG,QAAF,EAA5B,CAAN;AACD,OAFD,MAEO;AACL,cAAM,KAAID,mBAAJ,EAAa,aAAb,EAA4BE,IAAI,CAACC,SAAL,CAAeL,CAAf,CAA5B,CAAN;AACD;AACF;;AACD,QAAI,CAACJ,QAAL,EAAe;AACbA,MAAAA,QAAQ,GAAG,CAAX;AACD,KAXS,CAWR;;;AACF,QAAII,CAAC,CAACM,UAAF,IAAgBN,CAAC,CAACM,UAAF,KAAiB,GAArC,EAA0C;AACxC,UAAIV,QAAQ,KAAK,CAAjB,EAAoB;AAClB;AACA,YAAID,QAAJ,EAAc;AACZ,cAAI;AACFY,YAAAA,OAAO,CAACtB,IAAR,CAAaU,QAAb,EAAuB,SAAvB;AACD,WAFD,CAEE,OAAOK,CAAP,EAAU;AACVQ,YAAAA,MAAM,GAACC,QAAP,CAAgBjB,WAAhB,EAA6B,MAA7B,EAAsC,gCAA+BG,QAAS,EAA9E;AACD;AACF,SAND,MAMO;AACL,gBAAMX,cAAc,EAApB;AACD;AACF,OAXD,MAWO;AACL;AACA,cAAM0B,GAAG,GAACC,2BAAJ,CAAgCnB,WAAhC,CAAN;AACD;AACF,KA5BS,CA4BR;;;AACF,UAAM,2BAAW,GAAX,CAAN;AACA,WAAOD,mBAAmB,CAACC,WAAD,EAAcC,IAAd,EAAoBC,aAApB,EAAmC,IAAnC,EAAyCE,QAAQ,GAAG,CAApD,CAA1B;AACD;AACF;;AAED,MAAMgB,cAAc,GAAG,KAAK,IAA5B;;AAEO,eAAeC,iBAAf,CAAiCrB,WAAjC,EAAqE;AAC1E,QAAMsB,QAAQ,GAAG,CAAC,MAAMC,gBAAYC,uBAAZ,EAAP,KAAiDC,0BAAlE;;AACA,wCAAuBzB,WAAvB;AACA,QAAM0B,YAAY,GAAG,MAAMC,eAAe,GAACC,qBAAhB,CAAsC5B,WAAtC,CAA3B;;AACA,MAAI,CAAC0B,YAAY,CAACG,YAAlB,EAAgC;AAC9B,UAAM,KAAInB,mBAAJ,EAAa,kBAAb,EAAkC,oCAAmCV,WAAY,GAAjF,CAAN;AACD;;AACD,MAAI,CAAC0B,YAAY,CAACI,cAAlB,EAAkC;AAChC,UAAM,KAAIpB,mBAAJ,EACJ,qBADI,EAEH,uCAAsCV,WAAY,GAF/C,CAAN;AAID;;AACD,QAAM8B,cAAc,GAAGJ,YAAY,CAACI,cAApC;AACA,QAAMC,gBAAgB,CAAC/B,WAAD,CAAtB;;AACA,MAAI,MAAMgC,OAAO,GAACC,oBAAR,CAA6BjC,WAA7B,CAAV,EAAqD;AACnDgB,IAAAA,MAAM,GAACkB,OAAP,CACElC,WADF,EAEE,MAFF,EAGE,6FAHF;AAKD;;AACD,QAAMmC,gBAAgB,GAAGxC,IAAI,GAACyC,KAAL,CAAWpC,WAAX,EAAwBqC,IAAjD;AACA,QAAMC,KAAK,GAAG,MAAM,8BAAetC,WAAf,CAApB;AAEA,MAAIuC,0BAA0B,GAAG,KAAjC,CAzB0E,CA2B1E;AACA;;AACA,QAAMC,OAAO,CAACC,IAAR,CAAa,CACjB,CAAC,YAAY;AACX,UAAM,2BAAWrB,cAAX,CAAN;;AACA,QAAI,CAACmB,0BAAL,EAAiC;AAC/B,YAAM,IAAIG,KAAJ,CAAU,4BAAV,CAAN;AACD;AACF,GALD,GADiB,EAOjB,CAAC,YAAY;AACX,UAAMC,kBAAkB,GAAG,MAAM5C,mBAAmB,CAClDC,WADkD,EAElD;AACE4C,MAAAA,SAAS,EAAEC,kBAAOvD,KAAP,CAAawD,SAD1B;AAEEC,MAAAA,IAAI,EAAEjB,cAFR;AAGEkB,MAAAA,KAAK,EAAE;AAHT,KAFkD,EAOlD,YAAY;AACV,YAAMC,UAAU,GAAGX,KAAK,CAACY,wBAAN,GACfZ,KAAK,CAACY,wBADS,GAEf,MAAMhC,GAAG,GAACiC,yBAAJ,CAA8BnD,WAA9B,CAFV;AAGA,aAAO,CACLiD,UADK,EAELG,QAAQ,GAACC,SAAT,CAAmB/B,QAAnB,CAFK,EAGL8B,QAAQ,GAACC,SAAT,CAAmBlB,gBAAnB,CAHK,EAILU,kBAAOvD,KAAP,CAAagE,MAJR,EAKL1D,IALK,CAKA,GALA,CAAP;AAMD,KAjBiD,EAkBlD8B,YAAY,CAACvB,QAlBqC,CAApD;AAoBA,UAAMoD,gBAAgB,GAAG,MAAMxD,mBAAmB,CAChDC,WADgD,EAEhD;AACE4C,MAAAA,SAAS,EAAEC,kBAAOvD,KAAP,CAAawD,SAD1B;AAEEC,MAAAA,IAAI,EAAErB,YAAY,CAACG,YAFrB;AAGEmB,MAAAA,KAAK,EAAE;AAHT,KAFgD,EAOhD,YAAY;AACV,YAAMC,UAAU,GAAGX,KAAK,CAACY,wBAAN,GACfZ,KAAK,CAACY,wBADS,GAEf,MAAMhC,GAAG,GAACiC,yBAAJ,CAA8BnD,WAA9B,CAFV;AAGA,aAAO,CACL,UADK,EAELiD,UAFK,EAGLG,QAAQ,GAACC,SAAT,CAAmB/B,QAAnB,CAHK,EAIL8B,QAAQ,GAACC,SAAT,CAAmBlB,gBAAnB,CAJK,EAKLU,kBAAOvD,KAAP,CAAagE,MALR,EAML1D,IANK,CAMA,GANA,CAAP;AAOD,KAlB+C,EAmBhD8B,YAAY,CAACvB,QAnBmC,CAAlD;AAqBA,UAAMwB,eAAe,GAAC6B,oBAAhB,CAAqCxD,WAArC,EAAkD;AACtD2C,MAAAA,kBADsD;AAEtDY,MAAAA,gBAFsD;AAGtDpD,MAAAA,QAAQ,EAAEb,iBAAMyB,OAAN,GAAgB0C;AAH4B,KAAlD,CAAN;AAMAlB,IAAAA,0BAA0B,GAAG,IAA7B;AAEAvB,IAAAA,MAAM,GAAC0C,YAAP,CACE1D,WADF,EAEE,MAFF,EAGE;AACE2D,MAAAA,GAAG,EAAE,MADP;AAEEC,MAAAA,cAAc,EAAE;AAFlB,KAHF,EAOE,eAPF;;AAUAtE,qBAAMuE,WAAN,CAAkB,cAAlB,EAAmCC,MAAD,IAAoB;AACpD,UAAIA,MAAM,KAAK,cAAf,EAA+B;AAC7B9C,QAAAA,MAAM,GAAC+C,QAAP,CACE/D,WADF,EAEE,MAFF,EAGE,8CACE,qEADF,GAEE,0EAFF,GAGE,wBANJ;AAQD,OATD,MASO,IAAI8D,MAAM,KAAK,QAAf,EAAyB;AAC9B9C,QAAAA,MAAM,GAACkB,OAAP,CAAelC,WAAf,EAA4B,MAA5B,EAAoC,mBAApC;AACD;AACF,KAbD;AAcD,GA1ED,GAPiB,CAAb,CAAN;AAmFD;;AAEM,eAAe+B,gBAAf,CAAgC/B,WAAhC,EAAoE;AACzE,wCAAuBA,WAAvB,EADyE,CAEzE;AACA;AACA;;AACA,QAAM0B,YAAY,GAAG,MAAMC,eAAe,GAACC,qBAAhB,CAAsC5B,WAAtC,CAA3B;;AACA,QAAMgE,YAAY,GAAG1E,iBAAMyB,OAAN,EAArB;;AACA,QAAMkD,eAAe,GAAGD,YAAY,GAAGA,YAAY,CAACP,GAAhB,GAAsB,IAA1D;;AACAnE,mBAAM4E,kBAAN,CAAyB,cAAzB;;AACA,MAAIxC,YAAY,CAACvB,QAAb,IAAyBuB,YAAY,CAACvB,QAAb,KAA0B8D,eAAvD,EAAwE;AACtE;AACA,QAAI;AACFlD,MAAAA,OAAO,CAACtB,IAAR,CAAaiC,YAAY,CAACvB,QAA1B;AACD,KAFD,CAEE,OAAOK,CAAP,EAAU;AACVQ,MAAAA,MAAM,GAACC,QAAP,CAAgBjB,WAAhB,EAA6B,MAA7B,EAAsC,gCAA+B0B,YAAY,CAACvB,QAAS,EAA3F;AACD;AACF,GAPD,MAOO;AACL;AACA,UAAMX,cAAc,EAApB;AACD;;AACD,QAAMmC,eAAe,GAAC6B,oBAAhB,CAAqCxD,WAArC,EAAkD;AACtD2C,IAAAA,kBAAkB,EAAE,IADkC;AAEtDY,IAAAA,gBAAgB,EAAE,IAFoC;AAGtDpD,IAAAA,QAAQ,EAAE;AAH4C,GAAlD,CAAN;AAKA,QAAM6B,OAAO,GAACmC,mBAAR,CAA4BnE,WAA5B,CAAN;AACD","sourcesContent":["import { readExpRcAsync } from '@expo/config';\nimport ngrok from '@expo/ngrok';\nimport delayAsync from 'delay-async';\nimport * as path from 'path';\nimport { promisify } from 'util';\n\nimport * as Android from '../Android';\nimport Config from '../Config';\nimport * as Exp from '../Exp';\nimport * as ProjectSettings from '../ProjectSettings';\nimport * as UrlUtils from '../UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME } from '../User';\nimport UserSettings from '../UserSettings';\nimport XDLError from '../XDLError';\nimport * as Logger from './ProjectUtils';\nimport { assertValidProjectRoot } from './errors';\n\nconst ngrokConnectAsync = promisify(ngrok.connect);\n\nconst ngrokKillAsync = promisify(ngrok.kill);\n\nfunction getNgrokConfigPath() {\n  return path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n}\n\nasync function connectToNgrokAsync(\n  projectRoot: string,\n  args: ngrok.NgrokOptions,\n  hostnameAsync: () => Promise<string>,\n  ngrokPid: number | null | undefined,\n  attempts: number = 0\n): Promise<string> {\n  try {\n    const configPath = getNgrokConfigPath();\n    const hostname = await hostnameAsync();\n    const url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError('NGROK_ERROR', e.toString());\n      } else {\n        throw new XDLError('NGROK_ERROR', JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            Logger.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nexport async function startTunnelsAsync(projectRoot: string): Promise<void> {\n  const username = (await UserManager.getCurrentUsernameAsync()) || ANONYMOUS_USERNAME;\n  assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError('NO_PACKAGER_PORT', `No packager found for project at ${projectRoot}.`);\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      'NO_EXPO_SERVER_PORT',\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  const expoServerPort = packagerInfo.expoServerPort;\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    Logger.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  const packageShortName = path.parse(projectRoot).base;\n  const expRc = await readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      const expoServerNgrokUrl = await connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          const randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      const packagerNgrokUrl = await connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          const randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      Logger.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', (status: string) => {\n        if (status === 'reconnecting') {\n          Logger.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          Logger.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\n\nexport async function stopTunnelsAsync(projectRoot: string): Promise<void> {\n  assertValidProjectRoot(projectRoot);\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const ngrokProcess = ngrok.process();\n  const ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      Logger.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`);\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n"],"file":"../../project/ngrok.js","sourceRoot":"/@expo/xdl@59.0.13/src"}