{"version":3,"sources":["User.ts"],"names":["ANONYMOUS_USERNAME","UserManagerInstance","Semaphore","getGlobalInstance","__globalInstance","initialize","_currentUser","_getSessionLock","loginAsync","loginType","loginArgs","Error","apiAnonymous","ApiV2Client","clientForUser","loginResp","postAsync","username","password","otp","error","XDLError","user","_getProfileAsync","currentConnection","sessionSecret","registerAsync","userData","actor","getCurrentUserAsync","logoutAsync","registeredUser","createOrUpdateUserAsync","connection","email","givenName","familyName","e","console","message","ensureLoggedInAsync","Config","offline","silent","_interactiveAuthenticationCallbackAsync","setInteractiveAuthenticationCallback","callback","_readUserData","auth","UserSettings","getAsync","options","acquire","currentUser","accessToken","data","Logger","global","warn","code","release","getCurrentUserOnlyAsync","kind","getCurrentRobotUserOnlyAsync","getCurrentUsernameAsync","token","getSessionAsync","api","updatedUser","_prepareAuth0Profile","_parseAuth0Profile","Analytics","logEvent","userId","deleteKeyAsync","forgotPasswordAsync","usernameOrEmail","user_type","setAsync","setUserProperties","userType","rawProfile","Object","keys","reduce","p","key","niceProfile"],"mappings":"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","sourcesContent":["import camelCase from 'lodash/camelCase';\nimport isEmpty from 'lodash/isEmpty';\nimport snakeCase from 'lodash/snakeCase';\n\nimport Analytics from './Analytics';\nimport ApiV2Client from './ApiV2';\nimport Config from './Config';\nimport Logger from './Logger';\nimport UserSettings, { UserData } from './UserSettings';\nimport { Semaphore } from './Utils';\nimport XDLError from './XDLError';\n\nexport type User = {\n  kind: 'user';\n  // required\n  username: string;\n  nickname: string;\n  userId: string;\n  picture: string;\n  // optional\n  email?: string;\n  emailVerified?: boolean;\n  givenName?: string;\n  familyName?: string;\n  userMetadata: {\n    onboarded: boolean;\n    legacy?: boolean;\n  };\n  // auth methods\n  currentConnection: ConnectionType;\n  sessionSecret?: string;\n  accessToken?: string;\n};\n\nexport type RobotUser = {\n  kind: 'robot';\n  // required\n  userId: string;\n  username: string; // backwards compatible to show in current UI -- based on given name or placeholder\n  // optional\n  givenName?: string;\n  // auth methods\n  currentConnection: ConnectionType;\n  sessionSecret?: never; // robot users only use accessToken -- this prevents some extraneous typecasting\n  accessToken?: string;\n};\n\nexport type LegacyUser = {\n  kind: 'legacyUser';\n  username: string;\n  userMetadata: {\n    legacy: boolean;\n    needsPasswordMigration: boolean;\n  };\n};\n\nexport type UserOrLegacyUser = User | LegacyUser;\n\nexport type ConnectionType =\n  | 'Access-Token-Authentication'\n  | 'Username-Password-Authentication'\n  | 'facebook'\n  | 'google-oauth2'\n  | 'github';\n\nexport type RegistrationData = {\n  username: string;\n  password: string;\n  email?: string;\n  givenName?: string;\n  familyName?: string;\n};\n\n// note: user-token isn't listed here because it's a non-persistent pre-authenticated method\nexport type LoginType = 'user-pass' | 'facebook' | 'google' | 'github';\n\nexport const ANONYMOUS_USERNAME = 'anonymous';\n\nexport class UserManagerInstance {\n  _currentUser: User | RobotUser | null = null;\n  _getSessionLock = new Semaphore();\n  _interactiveAuthenticationCallbackAsync?: () => Promise<User>;\n\n  static getGlobalInstance() {\n    if (!__globalInstance) {\n      __globalInstance = new UserManagerInstance();\n    }\n    return __globalInstance;\n  }\n\n  initialize() {\n    this._currentUser = null;\n    this._getSessionLock = new Semaphore();\n  }\n\n  /**\n   * Logs in a user for a given login type.\n   *\n   * Valid login types are:\n   *  - \"user-pass\": Username and password authentication\n   *\n   * If the login type is \"user-pass\", we directly make the request to www\n   * to login a user.\n   */\n  async loginAsync(\n    loginType: LoginType,\n    loginArgs?: { username: string; password: string; otp?: string }\n  ): Promise<User> {\n    if (loginType === 'user-pass') {\n      if (!loginArgs) {\n        throw new Error(`The 'user-pass' login type requires a username and password.`);\n      }\n      const apiAnonymous = ApiV2Client.clientForUser();\n      const loginResp = await apiAnonymous.postAsync('auth/loginAsync', {\n        username: loginArgs.username,\n        password: loginArgs.password,\n        otp: loginArgs.otp,\n      });\n      if (loginResp.error) {\n        throw new XDLError('INVALID_USERNAME_PASSWORD', loginResp['error_description']);\n      }\n      const user = await this._getProfileAsync({\n        currentConnection: 'Username-Password-Authentication',\n        sessionSecret: loginResp.sessionSecret,\n      });\n      return user as User;\n    } else {\n      throw new Error(`Invalid login type provided. Must be 'user-pass'.`);\n    }\n  }\n\n  async registerAsync(\n    userData: RegistrationData,\n    user: UserOrLegacyUser | null = null\n  ): Promise<User> {\n    let actor: UserOrLegacyUser | RobotUser | null = user;\n\n    if (!actor) {\n      actor = await this.getCurrentUserAsync();\n    }\n\n    if (actor) {\n      await this.logoutAsync();\n      actor = null;\n    }\n\n    try {\n      // Create or update the profile\n      let registeredUser = await this.createOrUpdateUserAsync({\n        connection: 'Username-Password-Authentication', // Always create/update username password\n        email: userData.email,\n        givenName: userData.givenName,\n        familyName: userData.familyName,\n        username: userData.username,\n        password: userData.password,\n      });\n\n      registeredUser = await this.loginAsync('user-pass', {\n        username: userData.username,\n        password: userData.password,\n      });\n\n      return registeredUser;\n    } catch (e) {\n      console.error(e);\n      throw new XDLError('REGISTRATION_ERROR', 'Error registering user: ' + e.message);\n    }\n  }\n\n  /**\n   * Ensure user is logged in and has a valid token.\n   *\n   * If there are any issues with the login, this method throws.\n   */\n  async ensureLoggedInAsync(): Promise<User | RobotUser> {\n    if (Config.offline) {\n      throw new XDLError('NETWORK_REQUIRED', \"Can't verify user without network access\");\n    }\n\n    let user = await this.getCurrentUserAsync({ silent: true });\n    if (!user && this._interactiveAuthenticationCallbackAsync) {\n      user = await this._interactiveAuthenticationCallbackAsync();\n    }\n    if (!user) {\n      throw new XDLError('NOT_LOGGED_IN', 'Not logged in');\n    }\n    return user;\n  }\n\n  setInteractiveAuthenticationCallback(callback: () => Promise<User>) {\n    this._interactiveAuthenticationCallbackAsync = callback;\n  }\n\n  async _readUserData(): Promise<UserData | null> {\n    let auth = await UserSettings.getAsync('auth', null);\n    if (isEmpty(auth)) {\n      // XXX(ville):\n      // We sometimes read an empty string from ~/.expo/state.json,\n      // even though it has valid credentials in it.\n      // We don't know why.\n      // An empty string can't be parsed as JSON, so an empty default object is returned.\n      // In this case, retrying usually helps.\n      auth = await UserSettings.getAsync('auth', null);\n    }\n    if (typeof auth === 'undefined') {\n      return null;\n    }\n    return auth;\n  }\n\n  /**\n   * Get the current user based on the available token.\n   * If there is no current token, returns null.\n   */\n  async getCurrentUserAsync(options?: { silent?: boolean }): Promise<User | RobotUser | null> {\n    await this._getSessionLock.acquire();\n\n    try {\n      const currentUser = this._currentUser;\n\n      // If user is cached and there is an accessToken or sessionSecret, return the user\n      if (currentUser && (currentUser.accessToken || currentUser.sessionSecret)) {\n        return currentUser;\n      }\n\n      if (Config.offline) {\n        return null;\n      }\n\n      const data = await this._readUserData();\n      const accessToken = UserSettings.accessToken();\n\n      // No token, no session, no current user. Need to login\n      if (!accessToken && !data?.sessionSecret) {\n        return null;\n      }\n\n      try {\n        if (accessToken) {\n          return await this._getProfileAsync({\n            accessToken,\n            currentConnection: 'Access-Token-Authentication',\n          });\n        }\n\n        return await this._getProfileAsync({\n          currentConnection: data?.currentConnection,\n          sessionSecret: data?.sessionSecret,\n        });\n      } catch (e) {\n        if (!(options && options.silent)) {\n          Logger.global.warn('Fetching the user profile failed');\n          Logger.global.warn(e);\n        }\n        if (e.code === 'UNAUTHORIZED_ERROR') {\n          return null;\n        }\n        throw e;\n      }\n    } finally {\n      this._getSessionLock.release();\n    }\n  }\n\n  /**\n   * Get the current user and check if it's a robot.\n   * If the user is not a robot, it will throw an error.\n   */\n  async getCurrentUserOnlyAsync(): Promise<User | null> {\n    const user = await this.getCurrentUserAsync();\n    if (user && user.kind !== 'user') {\n      throw new XDLError('ROBOT_ACCOUNT_ERROR', 'This action is not supported for robot users.');\n    }\n    return user;\n  }\n\n  /**\n   * Get the current user and check if it's a robot.\n   * If the user is not a robot, it will throw an error.\n   */\n  async getCurrentRobotUserOnlyAsync(): Promise<RobotUser | null> {\n    const user = await this.getCurrentUserAsync();\n    if (user && user.kind !== 'robot') {\n      throw new XDLError('USER_ACCOUNT_ERROR', 'This action is not supported for normal users.');\n    }\n    return user;\n  }\n\n  async getCurrentUsernameAsync(): Promise<string | null> {\n    const token = UserSettings.accessToken();\n    if (token) {\n      const user = await this.getCurrentUserAsync();\n      if (user?.username) {\n        return user.username;\n      }\n    }\n    const data = await this._readUserData();\n    if (data?.username) {\n      return data.username;\n    }\n    return null;\n  }\n\n  async getSessionAsync(): Promise<{ sessionSecret?: string; accessToken?: string } | null> {\n    const token = UserSettings.accessToken();\n    if (token) {\n      return { accessToken: token };\n    }\n    const data = await this._readUserData();\n    if (data?.sessionSecret) {\n      return { sessionSecret: data.sessionSecret };\n    }\n    return null;\n  }\n\n  /**\n   * Create or update a user.\n   */\n  async createOrUpdateUserAsync(userData: object): Promise<User | null> {\n    let currentUser = this._currentUser;\n    if (!currentUser) {\n      // attempt to get the current user\n      currentUser = await this.getCurrentUserAsync();\n    }\n\n    if (currentUser?.kind === 'robot') {\n      throw new XDLError('ROBOT_ACCOUNT_ERROR', 'This action is not available for robot users');\n    }\n\n    const api = ApiV2Client.clientForUser(currentUser);\n\n    const { user: updatedUser } = await api.postAsync('auth/createOrUpdateUser', {\n      userData: _prepareAuth0Profile(userData),\n    });\n\n    this._currentUser = {\n      ...this._currentUser,\n      ..._parseAuth0Profile(updatedUser),\n      kind: 'user',\n    } as User;\n\n    return this._currentUser;\n  }\n\n  /**\n   * Logout\n   */\n  async logoutAsync(): Promise<void> {\n    if (this._currentUser?.kind === 'robot') {\n      throw new XDLError('ROBOT_ACCOUNT_ERROR', 'This action is not available for robot users');\n    }\n\n    // Only send logout events events for users without access tokens\n    if (this._currentUser && !this._currentUser?.accessToken) {\n      Analytics.logEvent('Logout', {\n        userId: this._currentUser.userId,\n        username: this._currentUser.username,\n        currentConnection: this._currentUser.currentConnection,\n      });\n    }\n\n    this._currentUser = null;\n\n    // Delete saved auth info\n    await UserSettings.deleteKeyAsync('auth');\n  }\n\n  /**\n   * Forgot Password\n   */\n  async forgotPasswordAsync(usernameOrEmail: string): Promise<void> {\n    const apiAnonymous = ApiV2Client.clientForUser();\n    return apiAnonymous.postAsync('auth/forgotPasswordAsync', {\n      usernameOrEmail,\n    });\n  }\n\n  /**\n   * Get profile given token data. Errors if token is not valid or if no\n   * user profile is returned.\n   *\n   * This method is called by all public authentication methods of `UserManager`\n   * except `logoutAsync`. Therefore, we use this method as a way to:\n   *  - update the UserSettings store with the current token and user id\n   *  - update UserManager._currentUser\n   *  - Fire login analytics events\n   *\n   * Also updates UserManager._currentUser.\n   *\n   * @private\n   */\n  async _getProfileAsync({\n    currentConnection,\n    sessionSecret,\n    accessToken,\n  }: {\n    currentConnection?: ConnectionType;\n    sessionSecret?: string;\n    accessToken?: string;\n  }): Promise<User | RobotUser> {\n    let user;\n    const api = ApiV2Client.clientForUser({\n      sessionSecret,\n      accessToken,\n    });\n\n    user = await api.getAsync('auth/userInfo');\n\n    if (!user) {\n      throw new Error('Unable to fetch user.');\n    }\n\n    user = {\n      ..._parseAuth0Profile(user),\n      // We need to inherit the \"robot\" type only, the rest is considered \"user\" but returned as \"person\".\n      kind: user.user_type === 'robot' ? 'robot' : 'user',\n      currentConnection,\n      sessionSecret,\n      accessToken,\n    };\n\n    // Create a \"username\" to use in current terminal UI (e.g. expo whoami)\n    if (user.kind === 'robot') {\n      user.username = user.givenName ? `${user.givenName} (robot)` : 'robot';\n    }\n\n    // note: do not persist the authorization token, must be env-var only\n    if (!accessToken) {\n      await UserSettings.setAsync('auth', {\n        userId: user.userId,\n        username: user.username,\n        currentConnection,\n        sessionSecret,\n      });\n    }\n\n    // If no currentUser, or currentUser.id differs from profiles\n    // user id, that means we have a new login\n    if (\n      (!this._currentUser || this._currentUser.userId !== user.userId) &&\n      user.username &&\n      user.username !== ''\n    ) {\n      if (!accessToken) {\n        // Only send login events for users without access tokens\n        Analytics.logEvent('Login', {\n          userId: user.userId,\n          currentConnection: user.currentConnection,\n          username: user.username,\n        });\n      }\n\n      Analytics.setUserProperties(user.username, {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n        userType: user.kind,\n      });\n    }\n\n    this._currentUser = user;\n\n    return user;\n  }\n}\n\nlet __globalInstance: UserManagerInstance | undefined;\nexport default UserManagerInstance.getGlobalInstance();\n\n/** Private Methods **/\nfunction _parseAuth0Profile(rawProfile: any) {\n  if (!rawProfile || typeof rawProfile !== 'object') {\n    return rawProfile;\n  }\n  return Object.keys(rawProfile).reduce((p, key) => {\n    p[camelCase(key)] = _parseAuth0Profile(rawProfile[key]);\n    return p;\n  }, {} as any);\n}\n\nfunction _prepareAuth0Profile(niceProfile: any) {\n  if (typeof niceProfile !== 'object') {\n    return niceProfile;\n  }\n\n  return Object.keys(niceProfile).reduce((p, key) => {\n    p[snakeCase(key)] = _prepareAuth0Profile(niceProfile[key]);\n    return p;\n  }, {} as any);\n}\n"],"file":"../User.js","sourceRoot":"/@expo/xdl@59.0.13/src"}