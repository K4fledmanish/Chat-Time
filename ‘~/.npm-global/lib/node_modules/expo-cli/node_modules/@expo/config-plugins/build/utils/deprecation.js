"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const WarningAggregator = __importStar(require("./warnings"));
function wrapWithWithDeprecationWarning({ plugin, platform, packageName, unversionedName, updateUrl, shouldWarn, }) {
    return (config, props) => {
        // Only warn if the user intends to enable an API for their app, otherwise there will be a flood of messages for every API.
        if (shouldWarn(config)) {
            WarningAggregator.addWarningForPlatform(platform, 'deprecated-plugin', `Unversioned "${unversionedName}" plugin is deprecated, please update your Expo config to using the versioned plugin "${packageName}". Guide ${chalk_1.default.underline(updateUrl)}`);
        }
        return plugin(config, props);
    };
}
exports.wrapWithWithDeprecationWarning = wrapWithWithDeprecationWarning;
//# sourceMappingURL=deprecation.js.map