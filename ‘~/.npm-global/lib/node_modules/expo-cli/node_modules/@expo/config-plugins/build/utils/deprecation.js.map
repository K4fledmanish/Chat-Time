{"version":3,"file":"deprecation.js","sourceRoot":"","sources":["../../src/utils/deprecation.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,kDAA0B;AAG1B,8DAAgD;AAEhD,SAAgB,8BAA8B,CAAI,EAChD,MAAM,EACN,QAAQ,EACR,WAAW,EACX,eAAe,EACf,SAAS,EACT,UAAU,GAQX;IACC,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QACvB,2HAA2H;QAC3H,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE;YACtB,iBAAiB,CAAC,qBAAqB,CACrC,QAAQ,EACR,mBAAmB,EACnB,gBAAgB,eAAe,yFAAyF,WAAW,YAAY,eAAK,CAAC,SAAS,CAC5J,SAAS,CACV,EAAE,CACJ,CAAC;SACH;QACD,OAAO,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC/B,CAAC,CAAC;AACJ,CAAC;AA5BD,wEA4BC","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport chalk from 'chalk';\n\nimport { ConfigPlugin, ModPlatform } from '../Plugin.types';\nimport * as WarningAggregator from './warnings';\n\nexport function wrapWithWithDeprecationWarning<T>({\n  plugin,\n  platform,\n  packageName,\n  unversionedName,\n  updateUrl,\n  shouldWarn,\n}: {\n  plugin: ConfigPlugin<T>;\n  updateUrl: string;\n  platform: ModPlatform;\n  packageName: string;\n  unversionedName: string;\n  shouldWarn: (config: ExpoConfig) => boolean;\n}): ConfigPlugin<T> {\n  return (config, props) => {\n    // Only warn if the user intends to enable an API for their app, otherwise there will be a flood of messages for every API.\n    if (shouldWarn(config)) {\n      WarningAggregator.addWarningForPlatform(\n        platform,\n        'deprecated-plugin',\n        `Unversioned \"${unversionedName}\" plugin is deprecated, please update your Expo config to using the versioned plugin \"${packageName}\". Guide ${chalk.underline(\n          updateUrl\n        )}`\n      );\n    }\n    return plugin(config, props);\n  };\n}\n"]}