"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const AndroidConfig = __importStar(require("../android"));
const IOSConfig = __importStar(require("../ios"));
const core_plugins_1 = require("./core-plugins");
/**
 * Config plugin to apply all of the custom Expo iOS config plugins we support by default.
 * TODO: In the future most of this should go into versioned packages like expo-facebook, expo-updates, etc...
 */
exports.withExpoIOSPlugins = (config, { bundleIdentifier, expoUsername }) => {
    // Set the bundle ID ahead of time.
    if (!config.ios)
        config.ios = {};
    config.ios.bundleIdentifier = bundleIdentifier;
    return core_plugins_1.withPlugins(config, [
        [IOSConfig.BundleIdenitifer.withBundleIdentifier, { bundleIdentifier }],
        IOSConfig.Branch.withBranch,
        IOSConfig.Facebook.withFacebook,
        IOSConfig.Google.withGoogle,
        IOSConfig.Name.withDisplayName,
        // IOSConfig.Name.withName,
        IOSConfig.Orientation.withOrientation,
        IOSConfig.RequiresFullScreen.withRequiresFullScreen,
        IOSConfig.Scheme.withScheme,
        IOSConfig.UserInterfaceStyle.withUserInterfaceStyle,
        IOSConfig.UsesNonExemptEncryption.withUsesNonExemptEncryption,
        IOSConfig.Version.withBuildNumber,
        IOSConfig.Version.withVersion,
        IOSConfig.Google.withGoogleServicesFile,
        [IOSConfig.Updates.withUpdates, { expoUsername }],
        // Entitlements
        IOSConfig.Entitlements.withAppleSignInEntitlement,
        IOSConfig.Entitlements.withAccessesContactNotes,
        // TODO: We don't have a mechanism for getting the apple team id here yet
        [IOSConfig.Entitlements.withICloudEntitlement, { appleTeamId: 'TODO-GET-APPLE-TEAM-ID' }],
        IOSConfig.Entitlements.withAssociatedDomains,
        // XcodeProject
        IOSConfig.DeviceFamily.withDeviceFamily,
        IOSConfig.Locales.withLocales,
        // Dangerous
        IOSConfig.Icons.withIcons,
        IOSConfig.SplashScreen.withSplashScreen,
    ]);
};
/**
 * Config plugin to apply all of the custom Expo Android config plugins we support by default.
 * TODO: In the future most of this should go into versioned packages like expo-facebook, expo-updates, etc...
 */
exports.withExpoAndroidPlugins = (config, _a) => {
    var { expoUsername } = _a, props = __rest(_a, ["expoUsername"]);
    // Set the package name ahead of time.
    if (!config.android)
        config.android = {};
    config.android.package = props.package;
    return core_plugins_1.withPlugins(config, [
        // settings.gradle
        AndroidConfig.Name.withNameSettingsGradle,
        // project build.gradle
        AndroidConfig.GoogleServices.withClassPath,
        // app/build.gradle
        AndroidConfig.GoogleServices.withApplyPlugin,
        AndroidConfig.Package.withPackageGradle,
        AndroidConfig.Version.withVersion,
        // AndroidManifest.xml
        AndroidConfig.Package.withPackageManifest,
        AndroidConfig.AllowBackup.withAllowBackup,
        AndroidConfig.Scheme.withScheme,
        AndroidConfig.Orientation.withOrientation,
        AndroidConfig.Permissions.withPermissions,
        AndroidConfig.Branch.withBranch,
        AndroidConfig.Facebook.withFacebookManifest,
        AndroidConfig.Notifications.withNotificationManifest,
        AndroidConfig.UserInterfaceStyle.withUiModeManifest,
        AndroidConfig.GoogleMobileAds.withGoogleMobileAdsConfig,
        AndroidConfig.GoogleMapsApiKey.withGoogleMapsApiKey,
        AndroidConfig.IntentFilters.withAndroidIntentFilters,
        [AndroidConfig.Updates.withUpdates, { expoUsername }],
        // MainActivity.*
        AndroidConfig.UserInterfaceStyle.withUiModeMainActivity,
        // strings.xml
        AndroidConfig.Name.withName,
        AndroidConfig.Facebook.withFacebookAppIdString,
        // Dangerous -- these plugins run in reverse order.
        AndroidConfig.GoogleServices.withGoogleServicesFile,
        // Modify colors.xml and styles.xml
        AndroidConfig.RootViewBackgroundColor.withRootViewBackgroundColor,
        AndroidConfig.NavigationBar.withNavigationBar,
        AndroidConfig.StatusBar.withStatusBar,
        AndroidConfig.PrimaryColor.withPrimaryColor,
        AndroidConfig.Notifications.withNotificationIconColor,
        AndroidConfig.Icon.withIcons,
        AndroidConfig.Notifications.withNotificationIcons,
        // If we renamed the package, we should also move it around and rename it in source files
        // Added last to ensure this plugin runs first. Out of tree solutions will mistakenly resolve the package incorrectly otherwise.
        AndroidConfig.Package.withPackageRefactor,
        AndroidConfig.SplashScreen.withSplashScreen,
    ]);
};
//# sourceMappingURL=expo-plugins.js.map